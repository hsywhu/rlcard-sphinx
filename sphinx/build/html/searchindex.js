Search.setIndex({"docnames": ["algorithms", "development", "doctree", "games", "getting_started", "index", "overview", "rlcard.agents", "rlcard.envs", "rlcard.games", "rlcard.games.blackjack", "rlcard.games.bridge", "rlcard.games.doudizhu", "rlcard.games.gin_rummy", "rlcard.games.gin_rummy.utils", "rlcard.games.leducholdem", "rlcard.games.limitholdem", "rlcard.games.mahjong", "rlcard.games.nolimitholdem", "rlcard.games.uno", "rlcard.models", "rlcard.utils"], "filenames": ["algorithms.rst", "development.rst", "doctree.rst", "games.rst", "getting_started.rst", "index.md", "overview.rst", "rlcard.agents.rst", "rlcard.envs.rst", "rlcard.games.rst", "rlcard.games.blackjack.rst", "rlcard.games.bridge.rst", "rlcard.games.doudizhu.rst", "rlcard.games.gin_rummy.rst", "rlcard.games.gin_rummy.utils.rst", "rlcard.games.leducholdem.rst", "rlcard.games.limitholdem.rst", "rlcard.games.mahjong.rst", "rlcard.games.nolimitholdem.rst", "rlcard.games.uno.rst", "rlcard.models.rst", "rlcard.utils.rst"], "titles": ["Algorithms", "Development", "Indices and tables", "Games in RLCard", "Getting Started", "RLCard: A Toolkit for Reinforcement Learning in Card Games", "Overview", "rlcard.agents", "rlcard.envs", "rlcard.games", "rlcard.games.blackjack", "rlcard.games.bridge", "rlcard.games.doudizhu", "rlcard.games.gin_rummy", "rlcard.games.gin_rummy.utils", "rlcard.games.leducholdem", "rlcard.games.limitholdem", "rlcard.games.mahjong", "rlcard.games.nolimitholdem", "rlcard.games.uno", "rlcard.models", "rlcard.utils"], "terms": {"dqn": [0, 4, 5, 6, 7], "paper": [0, 5, 7], "i": [0, 1, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "basic": 0, "reinforc": [0, 1, 4, 6, 7], "rl": [0, 4, 5, 6, 7, 8, 20, 21], "we": [0, 1, 3, 4, 5, 6, 8, 16, 18, 20, 21], "wrap": [0, 1, 6], "an": [0, 1, 3, 4, 6, 7, 8, 14, 16, 18, 20, 21], "exampl": [0, 1, 3, 4, 6, 7], "show": [0, 3, 4, 6], "how": [0, 1, 3, 4, 6, 7, 16, 21], "can": [0, 1, 3, 4, 5, 6, 7, 8, 12, 13, 15, 16, 17, 18, 20, 21], "connect": [0, 5, 6, 7], "environ": [0, 2, 3, 4, 7, 8, 11, 13, 21], "In": [0, 1, 3, 4, 5, 6, 7], "agent": [0, 1, 2, 3, 5, 8, 20, 21], "follow": [0, 1, 3, 4, 5, 6, 7], "class": [0, 1, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "ar": [0, 3, 4, 5, 6, 7, 8, 10, 15, 16, 17, 18, 19, 20], "implement": [0, 1, 3, 5, 7, 8, 12, 15, 16, 17, 18], "dqnagent": [0, 2, 4, 7], "The": [0, 1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21], "interact": [0, 8, 11, 13], "normal": [0, 3, 21], "respons": [0, 6], "thi": [0, 1, 3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 17, 18, 20, 21], "keep": [0, 3, 12, 15, 16, 17, 18, 19, 20], "run": [0, 2, 4, 5, 6, 7, 8, 12, 15, 16, 17, 18, 19, 21], "mean": [0, 3], "std": 0, "first": [0, 3, 4, 5, 6, 8, 10, 12, 15, 16, 17, 18, 19], "preprocess": 0, "state": [0, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21], "befor": [0, 3, 8, 21], "feed": [0, 2, 4, 7], "model": [0, 2, 3, 6], "memori": [0, 2, 4, 7], "A": [0, 1, 3, 4, 6, 7, 8, 16, 17, 18, 19, 20, 21], "buffer": [0, 7], "manag": 0, "store": [0, 7, 12, 21], "sampl": [0, 2, 5, 7, 20], "transit": [0, 2, 4, 6, 7, 8], "estim": [0, 2, 5, 7], "neural": [0, 1, 5, 7], "network": [0, 1, 4, 5, 7], "us": [0, 1, 3, 4, 5, 6, 7, 8, 12, 20, 21], "make": [0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 20, 21], "predict": [0, 1, 2, 3, 7, 20], "fictiti": [0, 5, 7], "self": [0, 3, 5, 6, 7, 12, 15], "plai": [0, 1, 2, 3, 5, 6, 7, 9, 12, 15, 16, 17, 18, 19, 20, 21], "end": [0, 3, 4, 5, 6], "approach": 0, "solv": [0, 4], "card": [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21], "game": [0, 2, 4, 7, 8, 20, 21], "ha": [0, 3, 5, 12, 16, 17], "inner": [0, 7], "supervis": [0, 7], "train": [0, 2, 3, 6, 7, 8, 20], "base": [0, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "data": [0, 4, 5, 6, 7, 21], "gener": [0, 1, 4, 5, 6, 7, 8, 19], "toolkit": [0, 1, 3, 4, 6], "counterfactu": [0, 5], "regret": [0, 5, 6, 7], "minim": [0, 5, 6, 7], "minimizaiton": 0, "method": [0, 3, 5, 7], "imperfect": [0, 3, 5], "inform": [0, 3, 5, 7, 8, 11, 12, 13, 17], "art": 0, "framework": 0, "fix": [0, 3, 15], "size": [0, 3, 5, 7, 12], "ring": 0, "you": [1, 4, 5, 6], "add": [1, 2, 7, 19], "your": [1, 4, 5], "own": [1, 3], "sever": [1, 5, 6, 7], "step": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20], "either": [1, 3, 8], "design": [1, 2, 3, 4], "save": [1, 2, 4, 7, 21], "For": [1, 3, 4, 5, 6, 8, 12, 16, 18], "each": [1, 3, 4, 6, 7, 8, 12, 15, 16, 18, 19, 20, 21], "need": [1, 4, 5, 7, 12, 16, 18, 21], "all": [1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16, 17, 20], "player": [1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 21], "same": [1, 3, 6, 7, 12, 16, 20], "time": [1, 3, 4, 7, 12, 15, 21], "sure": [1, 5], "eval_step": [1, 2, 5, 7, 20], "use_raw": [1, 2, 20], "work": [1, 3], "correctli": 1, "inherit": 1, "rlcard": [1, 2, 4], "py": [1, 3, 4, 5, 7, 8, 11, 13, 14, 20], "Then": [1, 3, 4, 5, 6], "put": [1, 3, 15, 16, 20], "list": [1, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "rewrit": 1, "properti": [1, 11, 12, 20], "return": [1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "regist": [1, 2, 7, 8, 20], "__init__": 1, "load": [1, 2, 4, 7, 20], "leduc": [1, 2, 5, 7, 8, 15, 20], "holdem": [1, 4, 5, 7, 16, 18, 20], "nfsp": [1, 2, 4, 5, 6, 7], "from": [1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21], "import": [1, 4, 5], "leduc_nfsp_model": 1, "obtain": [1, 3, 4, 5, 6, 7, 16, 18], "although": [1, 7], "user": [1, 3, 6, 17], "mai": [1, 3, 4, 5, 6], "do": [1, 3, 4, 5, 7, 20, 21], "whatev": 1, "thei": [1, 3], "like": [1, 3, 4, 5, 20, 21], "try": [1, 4, 6, 20], "recommend": [1, 5, 6], "To": [1, 4, 5, 6], "compat": 1, "should": [1, 3, 4, 5, 6, 7, 8, 20, 21], "have": [1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 15, 16, 19, 21], "function": [1, 3, 4, 5, 6, 7, 8, 12, 15, 16, 17, 18, 19, 20, 21], "attribut": [1, 7], "given": [1, 3, 6, 7, 8, 10, 17, 20, 21], "current": [1, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21], "next": [1, 3, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19], "similar": [1, 3, 6], "evalu": [1, 2, 5, 7, 8, 16, 20, 21], "purpos": [1, 3, 5, 6, 7, 8], "learn": [1, 2, 3, 6, 7], "usual": [1, 3, 6], "some": [1, 3, 4, 5, 6, 8, 10, 11, 13, 15, 16, 17, 18, 19, 20], "nois": 1, "better": [1, 4, 14], "explor": [1, 7], "boolean": [1, 7, 8, 12, 15, 16, 17, 18, 19, 20], "true": [1, 3, 4, 5, 6, 7, 8, 10, 12, 15, 16, 17, 18, 19, 20], "raw": [1, 4, 5, 8, 20], "reason": 1, "fals": [1, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21], "numer": 1, "valu": [1, 3, 7, 12, 14, 16, 18, 20], "take": [1, 3, 4, 5, 6, 7, 8, 11, 13], "structur": [1, 3, 6], "so": [1, 3, 6, 7], "round": [1, 2, 3, 6, 9], "dealer": [1, 2, 3, 6, 9], "judger": [1, 2, 6, 9], "exist": [1, 4, 7], "easiest": 1, "wai": [1, 6], "core": 1, "env": [1, 2, 3, 4, 5, 6, 7, 12, 21], "_extract_st": 1, "which": [1, 3, 4, 5, 6, 7, 16, 17, 21], "_decode_act": 1, "decod": 1, "id": [1, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "text": [1, 14, 21], "string": [1, 3, 5, 7, 8, 12, 17, 19, 20, 21], "get_payoff": [1, 2, 5, 6, 8, 9, 14, 15, 16, 18, 19], "payoff": [1, 2, 4, 5, 6, 8, 14, 15, 16, 18, 19, 21], "now": 1, "tell": [1, 6], "where": [1, 3, 4, 7, 20], "locat": [1, 8, 20], "go": [1, 3], "_": [1, 4], "_init": 1, "indic": [1, 3, 6, 7, 8, 16, 18, 20, 21], "name": [1, 5, 8, 11, 13, 14, 20], "its": [1, 3, 14], "entri": [1, 3, 7, 8, 15, 16, 18, 19, 21], "point": [1, 3, 21], "test": [1, 5], "whether": [1, 3, 4, 7, 8, 11, 12, 13, 16, 17, 18, 20], "set": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 17], "up": [1, 3], "successfulli": [1, 12, 15, 16, 17, 18, 19], "eviron": 1, "addit": 1, "default": [1, 3, 4, 5, 7], "also": [1, 3, 4, 5, 6], "allow": [1, 3, 5, 7, 15], "document": [1, 4, 5, 6, 7], "limit": [1, 2, 4, 5, 7, 15, 16, 18, 19, 20], "texa": [1, 2, 4, 5, 7, 15, 16, 18, 19], "hold": [1, 2, 5, 8, 15, 19, 20], "em": [1, 2, 5, 8, 15, 19, 20], "describ": 1, "even": [1, 4, 6], "defin": [1, 6, 7], "our": [1, 3, 4, 5], "extract_st": [1, 2, 3, 8], "limitholdem": [1, 2, 9, 20], "decode_act": [1, 2, 3, 9, 13, 14], "chang": [1, 3, 4, 6], "paramet": [1, 2, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "adjust": 1, "difficulti": [1, 3], "number": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "rais": [1, 3, 4, 5, 7, 8, 15, 16, 17, 18], "overview": 2, "principl": 2, "high": [2, 3], "level": 2, "get": [2, 3, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "start": [2, 3, 5, 6, 7, 8, 11, 12, 13, 16, 18, 19], "random": [2, 3, 5, 6, 7, 14, 20, 21], "deep": [2, 5, 7], "q": [2, 3, 5, 7], "blackjack": [2, 5, 7, 9], "cfr": [2, 5, 6, 7, 20], "chanc": [2, 5, 7, 20], "fun": [2, 5], "pretrain": [2, 5, 20], "dmc": [2, 5, 7], "dou": [2, 5, 20], "dizhu": [2, 5, 20], "represent": [2, 5, 6, 7, 17, 19], "action": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "encod": [2, 5, 6, 15, 16, 19], "abstract": [2, 6, 12], "simpl": [2, 4, 5, 20, 21], "mahjong": [2, 4, 5, 9], "space": [2, 5], "No": [2, 5, 7, 15], "uno": [2, 4, 5, 9, 20], "gin": [2, 4, 5, 9, 13, 14, 20], "rummi": [2, 4, 5, 14, 20], "variat": 2, "bridg": [2, 4, 5, 9, 20], "algorithm": [2, 3, 4, 6, 7, 21], "deepcfr": [2, 6], "develop": [2, 3, 4, 5, 6], "ad": [2, 6, 7], "pre": [2, 4, 6], "rule": [2, 3, 4, 6, 12, 20], "new": [2, 4, 5, 6, 8, 12, 16, 18, 19, 21], "custom": 2, "reward": [2, 3, 4, 6, 7, 21], "calcul": [2, 3, 6, 7, 17], "modifi": [2, 3, 7], "get_action_featur": [2, 8], "get_perfect_inform": [2, 4, 5, 8, 9, 11], "get_player_id": [2, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19], "get_stat": [2, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19], "is_ov": [2, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19], "reset": [2, 5, 6, 8], "seed": [2, 4, 5, 6, 8], "set_ag": [2, 4, 5, 6, 8], "step_back": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19], "registr": 2, "envregistri": [2, 8], "envspec": [2, 8], "blackjackenv": [2, 8], "get_scor": [2, 8], "doudizhu": [2, 3, 4, 5, 9], "doudizhuenv": [2, 8], "limitholdemenv": [2, 8], "gin_rummi": [2, 9], "ginrummyenv": [2, 8], "leducholdem": [2, 9], "leducholdemenv": [2, 8], "mahjongenv": [2, 8], "nolimitholdem": [2, 9], "nolimitholdemenv": [2, 8], "bridgeenv": [2, 8], "bridgepayoffdeleg": [2, 8], "bridgestateextractor": [2, 8], "get_legal_act": [2, 8, 9, 11, 13, 16, 17, 18, 19], "get_state_shape_s": [2, 8], "defaultbridgepayoffdeleg": [2, 8], "defaultbridgestateextractor": [2, 8], "unoenv": [2, 8], "util": [2, 4, 9, 13], "elegent_form": [2, 21], "get_devic": [2, 4, 21], "init_54_deck": [2, 21], "init_standard_deck": [2, 21], "plot_curv": [2, 4, 21], "print_card": [2, 4, 9, 19, 21], "rank2int": [2, 21], "remove_illeg": [2, 21], "reorgan": [2, 4, 6, 21], "set_se": [2, 4, 21], "tournament": [2, 4, 21], "logger": [2, 4], "log": [2, 4, 7, 21], "log_perform": [2, 4, 21], "color": [2, 3, 17, 19, 20, 21], "create_se": [2, 21], "error": [2, 8, 21], "hash_se": [2, 21], "np_random": [2, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21], "pettingzoo_util": 2, "reorganize_pettingzoo": [2, 21], "run_game_pettingzoo": [2, 21], "tournament_pettingzoo": [2, 21], "wrap_stat": [2, 21], "blackjackdeal": [2, 9, 10], "deal_card": [2, 9, 10, 11, 12, 13, 16, 17, 19], "shuffl": [2, 6, 9, 10, 12, 16, 17, 19], "blackjackgam": [2, 9, 10], "configur": [2, 5, 6, 9, 10, 15, 16, 18, 19], "get_num_act": [2, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19], "get_num_play": [2, 9, 10, 11, 12, 13, 16, 17, 18, 19], "init_gam": [2, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19], "blackjackjudg": [2, 9, 10], "judge_gam": [2, 9, 10, 12, 15, 16, 17], "judge_round": [2, 9, 10], "judge_scor": [2, 9, 10], "blackjackplay": [2, 9, 10], "doudizhudeal": [2, 9, 12], "determine_rol": [2, 9, 12], "doudizhugam": [2, 9, 12], "doudizhujudg": [2, 9, 12], "calc_playable_card": [2, 9, 12], "chain_index": [2, 9, 12], "get_playable_card": [2, 9, 12], "judge_payoff": [2, 9, 12], "pair_attach": [2, 9, 12], "playable_cards_from_hand": [2, 9, 12], "restore_playable_card": [2, 9, 12], "solo_attach": [2, 9, 12], "doudizhuplay": [2, 9, 12, 17, 19], "available_act": [2, 9, 12], "current_hand": [2, 3, 9, 12], "play_back": [2, 9, 12], "set_current_hand": [2, 9, 12], "doudizhuround": [2, 9, 12], "cards_ndarray_to_str": [2, 9, 12], "find_last_greater_player_id_in_trac": [2, 9, 12], "find_last_played_cards_in_trac": [2, 9, 12], "initi": [2, 3, 4, 5, 9, 11, 12, 13, 16, 17, 18, 19, 21], "proceed_round": [2, 9, 12, 16, 17, 18, 19], "update_publ": [2, 9, 12], "limitholdemdeal": [2, 9, 15, 16, 18], "limitholdemgam": [2, 9, 15, 16, 18], "limitholdemjudg": [2, 9, 16, 18], "split_pot_among_play": [2, 9, 16], "split_pots_among_play": [2, 9, 16], "limitholdemplay": [2, 9, 16, 18], "playerstatu": [2, 9, 16], "aliv": [2, 9, 16], "allin": [2, 9, 16], "fold": [2, 3, 4, 5, 9, 15, 16, 17, 18], "limitholdemround": [2, 9, 15, 16], "start_new_round": [2, 9, 16, 18], "hand": [2, 3, 4, 5, 8, 9, 12, 13, 14, 16, 17, 19, 20], "evaluatehand": [2, 9, 16], "get_hand_five_card": [2, 9, 16], "compare_hand": [2, 9, 16], "compare_rank": [2, 9, 16], "determine_winn": [2, 9, 16], "determine_winner_four_of_a_kind": [2, 9, 16], "determine_winner_straight": [2, 9, 16], "final_compar": [2, 9, 16], "nolimitholdemdeal": [2, 9, 18], "nolimitholdemgam": [2, 9, 18], "stage": [2, 3, 7, 9, 18], "end_hidden": [2, 9, 18], "flop": [2, 3, 9, 18], "preflop": [2, 9, 18], "river": [2, 3, 9, 18], "showdown": [2, 5, 9, 18], "turn": [2, 3, 6, 9, 18], "nolimitholdemjudg": [2, 9, 18], "nolimitholdemplay": [2, 9, 18], "bet": [2, 3, 9, 16, 18], "all_in": [2, 9, 18], "check_cal": [2, 9, 18], "raise_half_pot": [2, 9, 18], "raise_pot": [2, 9, 18], "nolimitholdemround": [2, 9, 18], "get_nolimit_legal_act": [2, 9, 18], "leducholdemdeal": [2, 9, 15], "leducholdemgam": [2, 9, 15], "leducholdemjudg": [2, 9, 15], "leducholdemplay": [2, 9, 15], "leducholdemround": [2, 9, 15], "unodeal": [2, 9, 19], "flip_top_card": [2, 9, 19], "unogam": [2, 9, 19], "unojudg": [2, 9, 19], "judge_winn": [2, 9, 19], "unoplay": [2, 9, 17, 19], "unoround": [2, 9, 19], "perform_top_card": [2, 9, 19], "replace_deck": [2, 9, 19], "unocard": [2, 9, 19], "get_str": [2, 9, 17, 19], "info": [2, 4, 7, 9, 17, 19], "cards2list": [2, 9, 17, 19], "encode_hand": [2, 9, 19], "encode_target": [2, 9, 19], "hand2dict": [2, 9, 19], "init_deck": [2, 9, 17, 19], "mahjongdeal": [2, 9, 17], "mahjonggam": [2, 9, 17], "mahjongjudg": [2, 9, 17], "cal_set": [2, 9, 17], "check_consecut": [2, 9, 17], "judge_chow": [2, 9, 17], "judge_hu": [2, 9, 17], "judge_pong_gong": [2, 9, 17], "mahjongplay": [2, 9, 17], "chow": [2, 3, 9, 17], "gong": [2, 3, 9, 17], "play_card": [2, 9, 11, 17], "pong": [2, 3, 9, 17], "print_hand": [2, 9, 17], "print_pil": [2, 9, 17], "mahjonground": [2, 9, 17], "mahjongcard": [2, 9, 17], "set_index_num": [2, 9, 17], "encode_card": [2, 9, 14, 17], "pile2list": [2, 9, 17], "action_ev": [2, 9, 13], "actionev": [2, 9, 11, 13, 14], "declaredeadhandact": [2, 9, 13, 14], "discardact": [2, 9, 13, 14], "drawcardact": [2, 9, 13, 14], "ginact": [2, 9, 13, 14], "knockact": [2, 9, 13, 14], "pickupdiscardact": [2, 9, 13, 14], "scorenorthplayeract": [2, 9, 13, 14], "scoresouthplayeract": [2, 9, 13, 14], "gin_rummy_error": [2, 9, 13], "ginrummyerror": [2, 9, 14], "ginrummyprogramerror": [2, 9, 14], "meld": [2, 3, 9, 13, 20], "get_all_run_meld": [2, 9, 14], "get_all_run_melds_for_suit": [2, 9, 14], "get_all_set_meld": [2, 9, 14], "get_best_meld_clust": [2, 9, 14], "get_meld_clust": [2, 9, 13, 14], "move": [2, 9, 13], "dealhandmov": [2, 9, 14], "declaredeadhandmov": [2, 9, 14], "discardmov": [2, 9, 14], "drawcardmov": [2, 9, 14], "ginmov": [2, 9, 14], "ginrummymov": [2, 9, 14], "knockmov": [2, 9, 14], "pickupdiscardmov": [2, 9, 14], "playermov": [2, 9, 14], "scorenorthmov": [2, 9, 14], "scoresouthmov": [2, 9, 14], "scorer": [2, 9, 13], "ginrummyscor": [2, 9, 14], "get_payoff_gin_rummy_v0": [2, 9, 14], "get_payoff_gin_rummy_v1": [2, 9, 14], "dealerforround": [2, 3, 9, 14], "north": [2, 3, 14, 17], "south": [2, 3, 14, 17], "dealer_for_round": [2, 3, 14], "default_set": [2, 14], "going_out_deadwood_count": [2, 3, 13, 14], "is_allowed_gin": [2, 3, 14], "is_allowed_knock": [2, 3, 14], "is_allowed_pick_up_discard": [2, 3, 14], "is_allowed_to_discard_picked_up_card": [2, 3, 14], "is_always_knock": [2, 3, 14], "is_south_never_knock": [2, 3, 14], "max_drawn_card_count": [2, 3, 14], "max_move_count": [2, 14], "simple_gin_rummy_set": [2, 14], "stockpile_dead_card_count": [2, 3, 14], "change_set": [2, 14], "get_config_with_invalid_settings_set_to_default_valu": [2, 14], "print_set": [2, 14], "thinker": [2, 9, 13], "get_meld_piles_with_discard_card": [2, 14], "card_from_card_id": [2, 9, 14], "card_from_text": [2, 9, 14], "decode_card": [2, 9, 14], "get_card": [2, 9, 14], "get_card_id": [2, 9, 14], "get_deadwood": [2, 9, 14], "get_deadwood_count": [2, 9, 14], "get_deadwood_valu": [2, 9, 14], "get_deck": [2, 9, 14], "get_rank_id": [2, 9, 14], "get_suit_id": [2, 9, 14], "ginrummydeal": [2, 9, 13], "ginrummygam": [2, 9, 13, 14], "get_current_play": [2, 9, 11, 13], "get_last_act": [2, 9, 13], "judg": [2, 9, 10, 12, 15, 16, 17, 19], "ginrummyjudg": [2, 9, 13], "get_going_out_card": [2, 9, 13], "ginrummyplay": [2, 9, 13, 14], "add_card_to_hand": [2, 9, 13], "did_populate_hand": [2, 9, 13], "opponent_id_of": [2, 9, 13], "remove_card_from_hand": [2, 9, 11, 13], "short_name_of": [2, 9, 13], "ginrummyround": [2, 9, 13], "declare_dead_hand": [2, 9, 13], "discard": [2, 3, 9, 13, 20], "draw_card": [2, 9, 13], "knock": [2, 3, 9, 13, 14, 20], "pick_up_discard": [2, 9, 13], "score_player_0": [2, 9, 13], "score_player_1": [2, 9, 13], "bridgedeal": [2, 9, 11], "bridgegam": [2, 8, 9, 11], "bridgejudg": [2, 9, 11], "bridgeplay": [2, 9, 11], "bridgeround": [2, 9, 11], "board_id": [2, 9, 11], "dealer_id": [2, 3, 9, 11, 13, 18], "get_declar": [2, 9, 11], "get_dummi": [2, 9, 11], "get_left_defend": [2, 9, 11], "get_right_defend": [2, 9, 11], "get_trick_mov": [2, 9, 11], "get_trump_suit": [2, 9, 11], "is_bidding_ov": [2, 9, 11], "make_cal": [2, 9, 11], "print_scen": [2, 9, 11], "round_phas": [2, 9, 11], "vul": [2, 9, 11], "cfr_agent": [2, 4], "cfragent": [2, 4, 7], "action_prob": [2, 7, 21], "regret_match": [2, 7], "traverse_tre": [2, 7], "update_polici": [2, 7], "dqn_agent": 2, "checkpoint_attribut": [2, 7], "feed_memori": [2, 7], "from_checkpoint": [2, 7], "save_checkpoint": [2, 7], "set_devic": [2, 4, 7], "predict_nograd": [2, 7], "updat": [2, 4, 7, 12, 16], "estimatornetwork": [2, 7], "forward": [2, 6, 7, 8], "done": [2, 4, 6, 7], "legal_act": [2, 4, 5, 7, 15, 16, 21], "next_stat": [2, 4, 6, 7], "nfsp_agent": 2, "averagepolicynetwork": [2, 7], "nfspagent": [2, 4, 7], "sample_episode_polici": [2, 4, 7], "train_sl": [2, 7], "reservoirbuff": [2, 7], "clear": [2, 7], "info_st": [2, 7], "pettingzoo_ag": 2, "dqnagentpettingzoo": [2, 7], "nfspagentpettingzoo": [2, 7], "randomagentpettingzoo": [2, 7], "random_ag": 2, "randomag": [2, 4, 5, 6, 7], "dmc_agent": [2, 4], "file_writ": 2, "filewrit": [2, 7], "close": [2, 7], "gather_metadata": [2, 7], "dmcagent": [2, 7], "eval": [2, 7], "load_state_dict": [2, 7], "share_memori": [2, 7], "state_dict": [2, 7], "dmcmodel": [2, 7], "get_ag": [2, 7], "dmcnet": [2, 7], "pettingzoo_model": 2, "dmcagentpettingzoo": [2, 7], "dmcmodelpettingzoo": [2, 7], "act_pettingzoo": [2, 7], "create_buffers_pettingzoo": [2, 7], "trainer": [2, 4], "dmctrainer": [2, 4, 7], "compute_loss": [2, 7], "act": [2, 7], "create_buff": [2, 7], "create_optim": [2, 7], "get_batch": [2, 7], "human_ag": [2, 4], "blackjack_human_ag": 2, "humanag": [2, 4, 7], "leduc_holdem_human_ag": 2, "limit_holdem_human_ag": 2, "nolimit_holdem_human_ag": 2, "uno_human_ag": 2, "bridge_rule_model": 2, "bridgedefendernoviceruleag": [2, 20], "doudizhu_rule_model": 2, "doudizhuruleagentv1": [2, 20], "card_str2list": [2, 20], "combine_card": [2, 20], "list2card_str": [2, 20], "pick_chain": [2, 20], "doudizhurulemodelv1": [2, 20], "gin_rummy_rule_model": 2, "ginrummynoviceruleag": [2, 20], "ginrummynovicerulemodel": [2, 20], "leducholdem_rule_model": 2, "leducholdemruleagentv1": [2, 20], "leducholdemruleagentv2": [2, 20], "leducholdemrulemodelv1": [2, 20], "leducholdemrulemodelv2": [2, 20], "limitholdem_rule_model": 2, "limitholdemruleagentv1": [2, 20], "limitholdemrulemodelv1": [2, 20], "uno_rule_model": 2, "unoruleagentv1": [2, 20], "count_color": [2, 20], "filter_wild": [2, 20], "unorulemodelv1": [2, 20], "pretrained_model": 2, "leducholdemcfrmodel": [2, 20], "modelregistri": [2, 20], "modelspec": [2, 20], "index": [2, 3, 4, 7, 12, 16], "modul": [2, 5, 7], "search": [2, 5], "page": 2, "global": 3, "popular": 3, "bank": 3, "known": 3, "twenti": 3, "One": 3, "object": [3, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "beat": 3, "reach": [3, 7], "higher": [3, 14], "score": [3, 10, 17], "than": [3, 7, 12, 16], "without": [3, 6, 7, 21], "exceed": 3, "21": 3, "version": [3, 4, 5, 15, 16, 17, 18, 20], "onli": [3, 4, 5, 10], "two": [3, 6, 7, 10, 12, 15, 16, 17, 18], "option": [3, 5, 21], "hit": [3, 10], "stand": [3, 10], "bust": 3, "hi": [3, 12], "exce": 3, "after": [3, 4, 5, 6, 7, 16], "complet": [3, 4, 5, 6, 8], "choos": [3, 4, 5, 20], "real": 3, "hidden": 3, "until": [3, 16], "least": [3, 20], "17": 3, "toi": [3, 4, 7], "arrai": [3, 4, 7, 8, 16, 19, 20, 21], "player_scor": 3, "dealer_scor": 3, "deriv": [3, 7], "face": 3, "There": [3, 7, 16, 17, 18, 19, 21], "0": [3, 4, 5, 7, 14, 16, 18, 19], "1": [3, 4, 5, 7, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21], "receiv": [3, 7], "lose": [3, 4, 16], "tie": [3, 4], "win": [3, 4, 16, 17], "smaller": [3, 12], "introduc": [3, 6], "bay": 3, "bluff": 3, "oppon": [3, 4], "poker": 3, "deck": [3, 6, 10, 12, 16, 17, 19, 21], "consist": [3, 5], "pair": [3, 4, 12], "king": 3, "queen": 3, "jack": 3, "six": 3, "total": [3, 7, 12], "maximum": [3, 21], "amount": [3, 15], "2": [3, 4, 5, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "4": [3, 4, 5, 7, 14, 16, 17, 18, 19], "second": [3, 4, 6, 8], "unit": 3, "pot": [3, 16], "dealt": [3, 11, 13], "one": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21], "public": [3, 12, 15, 16], "reveal": 3, "again": 3, "final": [3, 4], "whose": [3, 12], "rank": [3, 21], "winner": [3, 10, 15, 16, 19], "If": [3, 4, 5, 7, 12, 18, 20, 21], "neither": 3, "other": [3, 4, 6, 7, 12, 15, 16, 17, 18, 19], "refer": [3, 5], "vector": [3, 21], "length": [3, 5, 7, 16], "36": [3, 4], "3": [3, 4, 5, 7, 8, 12, 14, 17, 18, 19], "element": [3, 7], "correspond": [3, 5, 8, 10, 12, 15, 16, 18, 19, 21], "last": [3, 6, 12, 13, 17], "30": [3, 4, 7], "chip": [3, 4, 5, 15, 16, 18], "could": [3, 4, 12], "rang": [3, 4, 14], "14": [3, 4, 5], "between": [3, 21], "below": [3, 4, 5], "j": [3, 4, 5, 12], "k": 3, "5": [3, 4, 7, 17, 18, 19], "6": [3, 5, 17, 18, 19], "20": 3, "35": 3, "similarli": [3, 4], "down": 3, "call": [3, 4, 5, 6, 7, 8, 12, 15, 16, 17, 18, 19, 20], "hole": 3, "commun": [3, 4, 5], "three": [3, 6], "seek": 3, "five": [3, 16], "best": [3, 16, 20], "among": [3, 16], "dure": [3, 4, 20], "check": [3, 4, 5, 8, 10, 15, 16, 17, 18, 19], "And": [3, 16], "72": 3, "52": [3, 5, 14, 21], "repres": [3, 6, 7, 20], "plu": 3, "observ": [3, 4, 5, 7, 8], "far": 3, "histori": [3, 7], "12": [3, 8, 13, 14, 20], "spade": 3, "13": 3, "25": [3, 11], "heart": 3, "26": [3, 8], "38": 3, "diamond": 3, "39": 3, "51": 3, "club": 3, "56": 3, "37": [3, 4], "61": [3, 19], "62": 3, "66": 3, "67": 3, "71": 3, "stardard": 3, "leteratur": 3, "milli": 3, "big": [3, 15, 16, 18], "blind": [3, 15, 16, 18], "per": 3, "mbb": 3, "h": 3, "most": [3, 6, 21], "chines": 3, "hundr": 3, "million": 3, "It": [3, 4, 5, 7], "peopl": 3, "pack": 3, "54": 3, "includ": [3, 5, 7], "red": [3, 17, 21], "joker": 3, "black": 3, "bid": [3, 11, 12, 16, 18, 20], "would": [3, 4, 5, 21], "landlord": [3, 4, 12], "who": [3, 6, 12, 15, 16, 19], "extra": 3, "peasant": [3, 4, 12], "togeth": 3, "fight": 3, "against": [3, 4, 7], "must": [3, 5, 8, 13], "combin": [3, 16, 20], "decid": [3, 7, 11, 13], "pass": [3, 4, 5, 7, 12, 13, 14, 20], "finish": [3, 7], "consecut": [3, 17], "highest": [3, 16, 20], "rid": [3, 21], "detail": [3, 7], "pleas": [3, 5], "wikipedia": [3, 7], "baik": [3, 5], "standard": [3, 21], "phase": 3, "heurist": 3, "specif": [3, 5, 6, 8, 10, 12, 15, 16, 17, 18, 19, 20, 21], "count": [3, 12, 17, 20], "kei": [3, 4], "bomb": 3, "power": 3, "chosen": [3, 7, 18], "lanlord": 3, "At": [3, 6], "decis": [3, 6, 7], "abl": 3, "view": 3, "readabl": 3, "python": [3, 5, 21], "dictionari": [3, 5, 7, 8], "tabl": 3, "descript": 3, "charact": [3, 11, 13, 17], "concis": 3, "t": [3, 4, 7, 12, 16], "10": [3, 5], "3333444455556666777788889999ttttjjjjqqqqkkkkaaaa2222br": 3, "seen_card": 3, "distribut": [3, 7, 10, 16], "made": [3, 5, 12], "tqa": 3, "integ": [3, 4, 5, 7, 12], "": [3, 4, 5, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21], "initial_hand": 3, "when": [3, 5, 6, 19, 20], "3456677799tjqkaab": 3, "trace": [3, 12], "tupl": [3, 7, 8, 12, 13, 15, 16, 17, 18, 19], "record": [3, 12], "everi": [3, 7], "8222": 3, "6kkk": 3, "8": [3, 12, 17, 19, 21], "played_card": [3, 12], "As": 3, "progress": 3, "been": [3, 16, 17, 19], "sort": [3, 16], "low": 3, "others_hand": [3, 12], "union": 3, "333444555678899tttjjjqqaa2r": 3, "legal": [3, 5, 7, 8, 11, 12, 13, 16, 17, 18, 19, 20, 21], "b": [3, 5, 19], "featur": [3, 5, 8], "plane": [3, 19], "15": [3, 14, 19], "row": 3, "corresond": 3, "respect": [3, 7], "column": 3, "rj": [3, 21], "rest": 3, "note": [3, 7, 8, 16, 18, 20], "just": [3, 6, 7, 20], "encourag": 3, "recent": 3, "27472": 3, "too": [3, 5], "larg": [3, 4], "thu": [3, 21], "origin": 3, "309": 3, "studi": 3, "techniqu": 3, "main": [3, 5, 16], "idea": 3, "kicker": 3, "fuzzi": 3, "focu": [3, 6], "major": [3, 6], "part": [3, 6], "33344": [3, 12], "333": 3, "sinc": [3, 6, 7, 20], "onc": [3, 5, 21], "increas": 3, "map": 3, "jsondata": 3, "action_spac": 3, "json": [3, 4], "type": [3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "solo": [3, 12], "27": [3, 20], "trio": [3, 12], "28": [3, 14], "40": [3, 7], "singl": [3, 4, 5, 6], "182": 3, "41": 3, "53": [3, 5], "156": 3, "chain": [3, 12], "102": 3, "103": [3, 4], "154": 3, "45": 3, "155": 3, "199": 3, "21822": 3, "200": [3, 4], "237": 3, "2939": 3, "238": 3, "267": 3, "quad": 3, "1326": 3, "268": 3, "280": 3, "858": 3, "281": [3, 4], "293": 3, "294": 3, "306": 3, "rocket": 3, "307": 3, "308": 3, "he": [3, 18, 21], "both": [3, 7], "9": [3, 12, 17, 19], "four": [3, 12, 16], "differ": [3, 4, 6, 7, 8, 21], "suit": [3, 14], "what": [3, 4, 6, 12, 17], "more": [3, 4, 7], "unlik": 3, "becaus": [3, 21], "fewer": 3, "faster": [3, 5], "almost": 3, "smae": 3, "reduc": 3, "seen": [3, 15, 16], "88889999ttttjjjjqqqqkkkkaaaa": 3, "8ttjjqqka": 3, "889999ttjjqqkkkaaa": 3, "8ttjjqqk": 3, "ttjjqq": 3, "tt": 3, "qq": [3, 5], "jj": [3, 5], "reduct": 3, "131": 3, "tile": 3, "china": [3, 5], "spread": 3, "throughout": 3, "world": [3, 5], "20th": 3, "centuri": 3, "commonli": [3, 21], "136": 3, "draw": [3, 7, 12, 16], "goal": [3, 5, 6], "leagal": 3, "14th": 3, "drawn": [3, 16], "form": [3, 19, 21], "revis": 3, "equal": [3, 5], "long": [3, 20], "she": 3, "34": [3, 4], "x": 3, "dimens": [3, 7, 8], "kind": [3, 7, 16], "pile": [3, 17, 19], "bamboo": [3, 17], "18": 3, "dot": [3, 17], "dragon": [3, 17], "green": [3, 17, 21], "29": [3, 14], "white": [3, 17, 21], "wind": [3, 17], "east": [3, 17], "31": [3, 4], "west": [3, 17], "32": [3, 4, 7], "33": 3, "termin": [3, 6, 21], "award": 3, "punish": 3, "But": 3, "previou": [3, 6, 8, 10, 12, 15, 16, 17, 18, 19], "minimum": 3, "none": [3, 4, 5, 7, 8, 12, 14, 16, 18, 20, 21], "remain": [3, 20], "stack": 3, "unlimit": 3, "half": 3, "full": 3, "american": 3, "shed": 3, "special": [3, 16], "seven": [3, 16], "place": 3, "top": [3, 19], "begin": [3, 8], "left": [3, 16], "gameplai": 3, "clockwis": 3, "direct": 3, "her": 3, "tri": 3, "match": [3, 7], "symbol": 3, "otherwis": [3, 7, 14, 20, 21], "trait": [3, 17, 19], "r": [3, 19], "y": [3, 7, 19], "g": [3, 16, 19], "blue": [3, 21], "yellow": [3, 21], "wild": [3, 19, 20], "draw_2": [3, 19], "skip": [3, 19], "target": [3, 4, 7, 10, 17, 19], "7": [3, 17, 19], "revers": [3, 4, 12, 19], "represnt": 3, "24": 3, "42": [3, 4], "43": [3, 4], "44": 3, "55": 3, "57": 3, "58": 3, "59": 3, "60": 3, "person": [3, 7], "regular": 3, "ac": 3, "being": 3, "deal": [3, 6, 7, 11, 12, 13, 16, 17, 19], "11": [3, 8, 11, 13, 20], "himself": 3, "sequenc": [3, 6, 12], "deadwood": [3, 20], "non": [3, 6, 21], "less": [3, 7], "determin": [3, 12, 17], "layoff": 3, "extend": 3, "knocker": 3, "posit": [3, 4, 7, 16, 20], "out": [3, 4, 5, 7, 16, 19], "zero": 3, "neg": 3, "undercut": 3, "bonu": 3, "pick": [3, 16], "stockpil": 3, "continu": [3, 4], "fashion": 3, "declar": 3, "dead": 3, "presenc": [3, 21], "order": 3, "AS": [3, 7], "kc": 3, "exclud": 3, "unknown": 3, "110": 3, "score_player_0_act": 3, "score_player_1_act": 3, "draw_card_act": 3, "pick_up_discard_act": 3, "declare_dead_hand_act": 3, "gin_act": 3, "discard_act": 3, "109": 3, "knock_act": 3, "divid": [3, 6], "100": [3, 4, 7, 14], "creat": [3, 4, 8, 11, 13, 14, 20, 21], "easier": 3, "specifi": [3, 4, 5, 16, 18], "partner": 3, "partnership": 3, "contract": [3, 7], "trick": 3, "trump": 3, "conclud": 3, "see": [3, 4, 5, 7], "dummi": 3, "expos": 3, "prefer": 3, "chicago": 3, "rather": [3, 7], "rubber": 3, "pagat": 3, "site": 3, "hands_rep": 3, "rep_index": 3, "card_id": [3, 14], "visibl": 3, "els": [3, 4, 16], "held": 3, "player_id": [3, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19], "trick_rep": 3, "trick_pil": 3, "hidden_car": 3, "ds_rep": 3, "vul_rep": 3, "vulner": 3, "dealer_rep": 3, "current_pl": 3, "ayer_rep": 3, "current_player_id": 3, "is_bid": 3, "_rep": 3, "bidding_r": 3, "p": [3, 5], "action_id": [3, 13, 14, 20], "max": [3, 7, 16], "last_bid_": 3, "rep": 3, "bid_amount": 3, "trump_suit": 3, "trump_suit_id": 3, "nt": 3, "e": [3, 5, 16], "w": 3, "current_player_rep": 3, "is_bidding_rep": 3, "bidding_rep": 3, "3h": 3, "last_bid_rep": 3, "1h": 3, "bid_amount_rep": 3, "trump_suit_rep": 3, "91": 3, "no_bid_act": 3, "bid_act": 3, "pass_act": 3, "dbl_action": 3, "rdbl_action": 3, "90": 3, "play_card_act": 3, "never": 3, "present": 3, "alwai": [3, 4, 20], "bidder": 3, "taken": [3, 7, 8, 16, 18], "defend": [3, 20], "side": [3, 16], "depend": [3, 6, 7], "upon": 3, "ignor": [3, 7], "over": [3, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19], "under": 3, "them": [3, 6, 7, 21], "mani": [3, 8, 21], "possibl": [3, 11, 13, 14], "poor": 3, "provid": [4, 5, 6, 7, 12], "avail": 4, "randomli": [4, 7, 12, 18], "code": [4, 5, 6, 7, 21], "find": [4, 12, 16], "run_random": 4, "argpars": 4, "pprint": 4, "def": 4, "arg": [4, 21], "config": [4, 5, 6, 8, 14], "numpi": [4, 7, 8, 19, 20, 21], "torch": [4, 5, 7], "num_act": [4, 5, 7], "num_play": [4, 5, 7, 11, 15, 16, 17, 18, 19], "trajectori": [4, 5, 6, 8, 21], "player_win": 4, "is_train": [4, 5, 8, 21], "print": [4, 5, 17, 19, 21], "ntrajectori": 4, "nsampl": 4, "raw_ob": [4, 5], "raw_legal_act": [4, 5], "__name__": 4, "__main__": 4, "parser": 4, "argumentpars": 4, "add_argu": 4, "str": [4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "choic": 4, "parse_arg": 4, "python3": 4, "expect": [4, 7], "output": [4, 7, 21], "look": 4, "someth": 4, "ordereddict": [4, 8], "ob": [4, 5, 7], "hq": 4, "public_card": [4, 15, 16], "all_chip": [4, 15, 16], "my_chip": 4, "current_play": 4, "action_record": 4, "hj": 4, "aim": 4, "appli": [4, 6, 7], "shown": 4, "run_rl": [4, 5], "o": 4, "gpu": [4, 7], "devic": [4, 7], "state_shap": [4, 5, 7], "mlp_layer": [4, 7], "64": 4, "elif": [4, 16], "hidden_layers_s": [4, 7], "q_mlp_layer": [4, 7], "append": 4, "log_dir": [4, 21], "episod": [4, 7, 21], "num_episod": [4, 21], "reorgana": 4, "here": [4, 5, 7], "assum": 4, "ani": [4, 5, 7, 14, 21], "perform": [4, 6, 7, 11, 12, 13, 17, 19, 21], "evaluate_everi": 4, "num_eval_gam": 4, "path": [4, 7], "csv_path": [4, 21], "fig_path": 4, "plot": [4, 21], "curv": [4, 21], "save_path": [4, 7, 21], "join": [4, 5], "pth": 4, "cuda": [4, 7], "int": [4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "5000": 4, "2000": 4, "experi": [4, 6, 7], "leduc_holdem_dqn_result": 4, "cuda_visible_devic": 4, "blackjack_dqn_result": 4, "cpu": [4, 7], "1985": 4, "loss": [4, 7], "3018044233322144": 4, "copi": [4, 7], "141": 4, "6624548435211182": 4, "4365": 4, "53533869981765755": 4, "418": 4, "70432752370834356": 4, "300": 4, "1175": 4, "552": 4, "40242588520050056": 4, "400": 4, "101": 4, "693": 4, "62362509965896616": 4, "500": 4, "0835": 4, "measur": 4, "averag": [4, 5, 7], "10000": 4, "abov": [4, 5, 6, 7], "achiev": 4, "freeli": 4, "simpli": 4, "argument": [4, 15], "travers": [4, 5, 6, 7], "tree": [4, 5, 6, 7], "run_cfr": [4, 5], "support": [4, 6, 7, 15, 16, 17, 18], "allow_step_back": [4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19], "eval_env": 4, "initil": 4, "cfr_model": [4, 7], "riter": 4, "format": 4, "leduc_holdem_cfr_result": 4, "iter": [4, 7, 14], "648": 4, "73575": 4, "64825": 4, "75925": 4, "human": [4, 5, 6, 7], "interfac": [4, 6, 7], "simplifi": [4, 5], "found": [4, 5, 6], "leduc_holdem_human": [4, 5], "leducholdemhumanag": 4, "while": [4, 7], "doe": 4, "final_st": 4, "_action_list": 4, "len": 4, "break": 4, "insert": 4, "let": 4, "hand_card": 4, "result": [4, 5, 6, 17, 21], "input": [4, 6, 7, 21], "press": 4, "tra": 4, "mont": [4, 5, 7], "carlo": [4, 5, 7], "scale": 4, "run_dmc": [4, 5], "load_model": [4, 7], "xpid": [4, 7], "savedir": [4, 7], "save_interv": [4, 7], "num_actor_devic": [4, 7], "num_actor": [4, 7], "training_devic": [4, 7], "store_tru": 4, "help": [4, 6, 21], "leduc_holdem": 4, "dmc_result": [4, 7], "root": [4, 7, 8], "dir": [4, 7], "interv": [4, 7], "minut": [4, 7], "simul": [4, 6, 7], "actor": [4, 7], "directori": 4, "meta": 4, "messag": 4, "csv": [4, 21], "field": [4, 5, 7], "77533": 4, "108": [4, 19], "2022": 4, "03": 4, "23": [4, 5], "859": 4, "77544": 4, "631": 4, "77554": 4, "505": 4, "77564": 4, "183": 4, "77574": 4, "967": 4, "_tick": 4, "_time": 4, "frame": [4, 7], "mean_episode_return_0": 4, "loss_0": 4, "mean_episode_return_1": 4, "loss_1": 4, "mean_episode_return_2": 4, "loss_2": 4, "77516": 4, "335": 4, "972": 4, "checkpoint": [4, 7], "tar": 4, "367": 4, "065": 4, "9600": 4, "1884": 4, "fp": 4, "stat": 4, "2543543875217438": 4, "8054689764976501": 4, "7721042633056641": 4, "2532467544078827": 4, "7515923380851746": 4, "753164529800415": 4, "48": [4, 5], "070": 4, "19200": 4, "1918": 4, "39971283078193665": 4, "5237217545509338": 4, "49323707818984985": 4, "3434908390045166": 4, "6602272987365723": 4, "6572840213775635": 4, "script": [4, 5], "multipl": [4, 5, 6, 21], "compar": [4, 16], "model_path": [4, 7], "isfil": 4, "map_loc": 4, "isdir": 4, "zoo": [4, 5], "enumer": [4, 14, 16, 18], "num_gam": 4, "narg": 4, "alreadi": 4, "command": [4, 5], "21185": 4, "evelu": 4, "exact": 4, "timestep": [4, 7], "0_432758400": 4, "v1": [4, 5], "1000": [4, 7], "1_432758400": 4, "2_432758400": 4, "easi": [5, 6], "variou": 5, "lab": [5, 7], "rice": 5, "m": [5, 7], "univers": [5, 7], "contributor": 5, "offici": 5, "websit": 5, "http": [5, 7, 21], "www": 5, "org": [5, 7, 21], "tutori": 5, "jupyt": 5, "notebook": 5, "github": [5, 7], "com": [5, 7, 21], "datamllab": 5, "arxiv": [5, 7], "ab": [5, 7], "1910": 5, "04376": 5, "video": 5, "youtub": 5, "gui": 5, "resourc": 5, "awesom": 5, "ai": [5, 20], "relat": 5, "project": [5, 14], "douzero": 5, "zhihu": 5, "zhuanlan": 5, "526723604": 5, "miscellan": 5, "heard": 5, "centric": 5, "survei": 5, "slack": 5, "discuss": 5, "channel": 5, "group": 5, "password": 5, "rlcardqqgroup": 5, "665647450": 5, "117349516": 5, "pip": 5, "stabl": 5, "pip3": 5, "pytorch": [5, 7], "slow": 5, "mirror": 5, "tsinghua": 5, "pypi": 5, "tuna": 5, "edu": 5, "cn": 5, "altern": 5, "clone": [5, 7], "latest": 5, "gite": 5, "git": 5, "branch": 5, "master": [5, 7], "depth": 5, "cd": 5, "conda": 5, "c": [5, 7], "toubun": 5, "manual": 5, "demand": 5, "short": 5, "action_shap": [5, 7], "flexibli": 5, "pettingzoo": 5, "debug": 5, "complex": 5, "aspect": 5, "infoset": 5, "link": 5, "usag": 5, "wiki": [5, 7], "doc": 5, "83": 5, "121": 5, "162": 5, "163": 5, "serv": 5, "baselin": 5, "explan": 5, "v2": 5, "novic": [5, 20], "env_id": [5, 6, 8], "local": 5, "reproduc": [5, 6], "backward": [5, 6, 8, 13], "These": [5, 15], "game_": 5, "game_num_play": 5, "environemnt": [5, 8], "access": [5, 6], "shape": [5, 7], "assumt": 5, "templat": 5, "instead": [5, 7], "flexibl": 5, "oper": [5, 21], "raw_act": [5, 8], "otherewis": 5, "perfect": [5, 8], "wrapper": 5, "etc": [5, 7], "engin": [5, 13, 14], "greatli": 5, "appreci": 5, "issu": 5, "feedback": 5, "bug": 5, "want": 5, "guid": 5, "question": [5, 21], "contact": 5, "daochen": 5, "zha": 5, "thank": 5, "technologi": 5, "co": 5, "ltd": 5, "enabl": 6, "care": [6, 7], "about": 6, "collect": 6, "well": [6, 20], "organ": 6, "conveni": 6, "scalabl": 6, "easili": 6, "maintain": 6, "directli": 6, "fed": [6, 21], "advanc": 6, "restor": [6, 7, 12, 13], "defaultli": 6, "off": 6, "requir": 6, "expens": 6, "recoed": 6, "mode": 6, "single_agent_mod": 6, "common": 6, "concept": 6, "pattern": 6, "dig": 6, "research": 6, "natur": 6, "alloc": [6, 16], "role": [6, 12], "strategi": [6, 20], "summar": 6, "categori": [6, 16], "belong": 6, "conterfactu": 6, "polici": 7, "probabl": [7, 20, 21], "state_str": 7, "leagel": 7, "dict": [7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "contain": [7, 8, 12, 15, 16, 17, 18, 19], "prob": 7, "node": [7, 8], "state_util": 7, "dennybritz": 7, "blob": 7, "copyright": 7, "2019": 7, "matthew": 7, "judel": 7, "2016": 7, "denni": 7, "britz": 7, "permiss": 7, "herebi": 7, "grant": 7, "free": 7, "charg": 7, "softwar": 7, "associ": 7, "file": [7, 8, 11, 13, 14, 20, 21], "restrict": 7, "right": 7, "merg": 7, "publish": 7, "sublicens": 7, "sell": 7, "permit": 7, "whom": 7, "furnish": 7, "subject": 7, "condit": 7, "notic": 7, "shall": 7, "substanti": 7, "portion": 7, "THE": 7, "warranti": 7, "OF": 7, "express": 7, "OR": 7, "impli": 7, "BUT": 7, "NOT": 7, "TO": 7, "merchant": 7, "fit": 7, "FOR": 7, "particular": [7, 8, 20], "AND": 7, "noninfring": 7, "IN": 7, "NO": 7, "event": 7, "author": [7, 8, 11, 13, 14, 20], "holder": 7, "BE": 7, "liabl": 7, "claim": 7, "damag": 7, "liabil": 7, "tort": 7, "aris": 7, "WITH": 7, "replay_memory_s": 7, "20000": 7, "replay_memory_init_s": 7, "update_target_estimator_everi": 7, "discount_factor": 7, "99": 7, "epsilon_start": 7, "epsilon_end": 7, "epsilon_decay_step": 7, "batch_siz": 7, "train_everi": 7, "learning_r": 7, "5e": 7, "05": 7, "save_everi": 7, "inf": 7, "approxim": 7, "tensorflow": 7, "middl": 7, "optim": [7, 20], "instanc": [7, 8, 20], "variabl": 7, "replai": 7, "popul": 7, "float": [7, 14, 21], "classmethod": [7, 12], "mask": 7, "d": 7, "q_valu": 7, "filenam": 7, "checkpoint_dqn": 7, "pt": 7, "genrat": 7, "disconnect": 7, "comput": 7, "graph": 7, "batch": 7, "001": 7, "np": 7, "ndarrai": [7, 14], "doubl": 7, "state_len": 7, "num_valid_act": 7, "toward": 7, "case": [7, 16, 20], "label": 7, "minh": 7, "et": 7, "al": 7, "2015": [7, 21], "accord": [7, 12], "seri": 7, "tanh": 7, "layer": 7, "tensor": 7, "memory_s": 7, "minibatch": 7, "action_batch": 7, "reward_batch": 7, "next_state_batch": 7, "done_batch": 7, "state_batch": 7, "alia": 7, "1603": 7, "01121": 7, "log_action_prob": 7, "reservoir_buffer_capac": 7, "anticipatory_param": 7, "256": 7, "rl_learning_r": 7, "sl_learning_r": 7, "005": 7, "min_buffer_size_to_learn": 7, "q_replay_memory_s": 7, "q_replay_memory_init_s": 7, "q_update_target_estimator_everi": 7, "q_discount_factor": 7, "q_epsilon_start": 7, "06": 7, "q_epsilon_end": 7, "q_epsilon_decay_step": 7, "1000000": 7, "q_batch_siz": 7, "q_train_everi": 7, "evaluate_with": 7, "average_polici": 7, "henrich": 7, "silver": 7, "cross": 7, "entropi": 7, "realiz": 7, "best_respons": 7, "checkpoint_nfsp": 7, "avg": 7, "enough": [7, 21], "uniform": 7, "stream": 7, "storag": 7, "arbitrari": 7, "en": 7, "reservoir_sampl": 7, "potenti": 7, "reservoir": 7, "num_sampl": 7, "uniformli": 7, "valueerror": 7, "equival": [7, 20], "curent": [7, 8], "gerener": 7, "static": [7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "xp_arg": 7, "rootdir": 7, "palaa": 7, "success": [7, 10], "bool": [7, 10, 11, 12, 15, 16, 17, 18, 19], "to_log": 7, "tick": 7, "verbos": 7, "512": 7, "exp_epsilon": 7, "01": [7, 21], "overridden": 7, "subclass": 7, "recip": 7, "within": 7, "afterward": 7, "former": 7, "hook": 7, "latter": 7, "silent": 7, "free_queu": 7, "full_queu": 7, "num_buff": 7, "device_iter": 7, "is_pettingzoo_env": 7, "total_fram": 7, "100000000000": 7, "unroll_length": 7, "50": 7, "num_thread": 7, "max_grad_norm": 7, "0001": 7, "alpha": 7, "momentum": 7, "epsilon": 7, "1e": 7, "prbabil": 7, "learner": 7, "unrol": 7, "share": 7, "thread": 7, "norm": 7, "gradient": 7, "rate": 7, "rmsprop": 7, "smooth": 7, "constant": 7, "logit": 7, "actor_model": 7, "mean_episode_return_buf": 7, "lock": 7, "learner_model": 7, "alon": 7, "understand": 7, "displai": 7, "through": 7, "child": 8, "third": 8, "content": 8, "transiton": 8, "back": [8, 10, 12, 15, 16, 17, 18, 19], "entry_point": [8, 20], "envron": 8, "instanti": [8, 20], "env_num": 8, "william": [8, 11, 13, 14, 20], "hale": [8, 11, 13, 14, 20], "date": [8, 11, 13, 14, 20], "2020": [8, 13, 14, 20], "ginrummi": [8, 13], "2021": [8, 11, 20], "extract": 8, "num_deck": 10, "game_config": [10, 15, 16, 18, 19], "specifii": [10, 15, 19], "applic": [10, 16, 17, 18, 19], "number_of_act": 10, "number_of_play": 10, "initialilz": [10, 15, 17], "statu": 10, "plater": [10, 15, 17, 19], "game_point": [10, 16, 18], "num": [11, 13, 17, 19, 21], "stock_pil": [11, 13], "outer": [11, 13], "soon": [11, 13], "bridgecard": 11, "playcardmov": 11, "callactionev": 11, "playcardact": 11, "api": 12, "aciton": 12, "eg": 12, "recalcul": 12, "init_flag": 12, "acceler": 12, "preocess": 12, "playabl": 12, "indexes_list": 12, "those": [12, 16], "start_index1": 12, "length1": 12, "landlord_id": 12, "winner_id": 12, "cards_count": 12, "chain_start": 12, "chain_length": 12, "attach": 12, "trio_chain_pair_x": 12, "four_two_pair": 12, "trio_chain": 12, "trio_pair": 12, "attachment1": 12, "attachment2": 12, "elemnt": 12, "larger": 12, "playable_card": 12, "trio_chain_solo_x": 12, "four_two_solo": 12, "trio_solo": 12, "perfrom": 12, "greater_play": 12, "biggest": 12, "num_cards_left": 12, "_current_hand": 12, "ndarray_card": 12, "except": 14, "16": 14, "player_d": 14, "shuffled_deck": 14, "best_meld_clust": 14, "deadwood_count": 14, "callabl": 14, "lower": 14, "enum": [14, 16, 18], "discard_card": 14, "env_card": 14, "meld_clust": 14, "small": [15, 16, 18], "configar": 15, "raise_amount": [15, 16], "allowed_raise_num": [15, 16], "in_chip": 16, "split": 16, "loop": 16, "distribute_pots_among_play": 16, "yet": 16, "Of": 16, "much": 16, "in_chips_initi": 16, "handl": 16, "setup": [16, 18], "all_card": 16, "catagori": 16, "rtype": 16, "palyer": 16, "param": [16, 17, 20, 21], "hand_catagori": 16, "ct": 16, "st": 16, "h9": 16, "b9": 16, "c2": 16, "c8": 16, "c7": 16, "cj": 16, "sj": 16, "player1": 16, "player0": 16, "handcard": 16, "loser": 16, "key_index": 16, "all_play": 16, "potential_winner_index": 16, "situat": 16, "straight": 16, "flush": 16, "didn": 16, "card_catagori": 16, "pop": 17, "set_count": 17, "_list": 17, "last_play": 17, "maximum_scor": 17, "card_typ": [17, 19], "index_num": 17, "init_chip": 18, "init_raise_amount": 18, "flip": 19, "top_card": 19, "wild_draw_4": 19, "wild_color": 19, "nice": [19, 21], "assign": 19, "collor": 19, "represerv": 19, "passact": 20, "hand_list": 20, "naiv": 20, "asid": 20, "cluster": 20, "color_num": 20, "filter": 20, "filtered_hand": 20, "appear": 20, "wrraper": 20, "model_id": 20, "eleg": 21, "elegent_card": 21, "bj": 21, "alist": 21, "read": 21, "corespond": 21, "empti": 21, "valid": 21, "remov": 21, "illeg": 21, "diment": 21, "probd": 21, "friendli": 21, "avrag": 21, "write": 21, "bold": 21, "highlight": 21, "surround": 21, "appropri": 21, "grai": 21, "magenta": 21, "cyan": 21, "crimson": 21, "max_byt": 21, "strong": 21, "system": 21, "might": 21, "robust": 21, "especi": 21, "concurr": 21, "sourc": 21, "byte": 21, "msg": 21, "prng": 21, "activ": 21, "process": 21, "literatur": 21, "linear": 21, "correl": 21, "blog": 21, "unity3d": 21, "07": 21, "primer": 21, "repeat": 21, "stackoverflow": 21, "1554958": 21, "dl": 21, "acm": 21, "citat": 21, "cfm": 21, "1276928": 21, "saniti": 21, "hash": 21, "scheme": 21, "crypto": 21, "strength": 21, "good": 21}, "objects": {"rlcard.agents": [[7, 0, 0, "-", "cfr_agent"], [7, 0, 0, "-", "dqn_agent"], [7, 0, 0, "-", "nfsp_agent"], [7, 0, 0, "-", "pettingzoo_agents"], [7, 0, 0, "-", "random_agent"]], "rlcard.agents.cfr_agent": [[7, 1, 1, "", "CFRAgent"]], "rlcard.agents.cfr_agent.CFRAgent": [[7, 2, 1, "", "action_probs"], [7, 2, 1, "", "eval_step"], [7, 2, 1, "", "get_state"], [7, 2, 1, "", "load"], [7, 2, 1, "", "regret_matching"], [7, 2, 1, "", "save"], [7, 2, 1, "", "train"], [7, 2, 1, "", "traverse_tree"], [7, 2, 1, "", "update_policy"]], "rlcard.agents.dmc_agent": [[7, 0, 0, "-", "file_writer"], [7, 0, 0, "-", "model"], [7, 0, 0, "-", "pettingzoo_model"], [7, 0, 0, "-", "pettingzoo_utils"], [7, 0, 0, "-", "trainer"], [7, 0, 0, "-", "utils"]], "rlcard.agents.dmc_agent.file_writer": [[7, 1, 1, "", "FileWriter"], [7, 3, 1, "", "gather_metadata"]], "rlcard.agents.dmc_agent.file_writer.FileWriter": [[7, 2, 1, "", "close"], [7, 2, 1, "", "log"]], "rlcard.agents.dmc_agent.model": [[7, 1, 1, "", "DMCAgent"], [7, 1, 1, "", "DMCModel"], [7, 1, 1, "", "DMCNet"]], "rlcard.agents.dmc_agent.model.DMCAgent": [[7, 2, 1, "", "eval"], [7, 2, 1, "", "eval_step"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "load_state_dict"], [7, 2, 1, "", "parameters"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "set_device"], [7, 2, 1, "", "share_memory"], [7, 2, 1, "", "state_dict"], [7, 2, 1, "", "step"]], "rlcard.agents.dmc_agent.model.DMCModel": [[7, 2, 1, "", "eval"], [7, 2, 1, "", "get_agent"], [7, 2, 1, "", "get_agents"], [7, 2, 1, "", "parameters"], [7, 2, 1, "", "share_memory"]], "rlcard.agents.dmc_agent.model.DMCNet": [[7, 2, 1, "", "forward"]], "rlcard.agents.dmc_agent.pettingzoo_model": [[7, 1, 1, "", "DMCAgentPettingZoo"], [7, 1, 1, "", "DMCModelPettingZoo"]], "rlcard.agents.dmc_agent.pettingzoo_model.DMCAgentPettingZoo": [[7, 2, 1, "", "eval_step"], [7, 2, 1, "", "feed"], [7, 2, 1, "", "step"]], "rlcard.agents.dmc_agent.pettingzoo_model.DMCModelPettingZoo": [[7, 2, 1, "", "eval"], [7, 2, 1, "", "get_agent"], [7, 2, 1, "", "get_agents"], [7, 2, 1, "", "parameters"], [7, 2, 1, "", "share_memory"]], "rlcard.agents.dmc_agent.pettingzoo_utils": [[7, 3, 1, "", "act_pettingzoo"], [7, 3, 1, "", "create_buffers_pettingzoo"]], "rlcard.agents.dmc_agent.trainer": [[7, 1, 1, "", "DMCTrainer"], [7, 3, 1, "", "compute_loss"], [7, 3, 1, "", "learn"]], "rlcard.agents.dmc_agent.trainer.DMCTrainer": [[7, 2, 1, "", "start"]], "rlcard.agents.dmc_agent.utils": [[7, 3, 1, "", "act"], [7, 3, 1, "", "create_buffers"], [7, 3, 1, "", "create_optimizers"], [7, 3, 1, "", "get_batch"]], "rlcard.agents.dqn_agent": [[7, 1, 1, "", "DQNAgent"], [7, 1, 1, "", "Estimator"], [7, 1, 1, "", "EstimatorNetwork"], [7, 1, 1, "", "Memory"], [7, 1, 1, "", "Transition"]], "rlcard.agents.dqn_agent.DQNAgent": [[7, 2, 1, "", "checkpoint_attributes"], [7, 2, 1, "", "eval_step"], [7, 2, 1, "", "feed"], [7, 2, 1, "", "feed_memory"], [7, 2, 1, "", "from_checkpoint"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "save_checkpoint"], [7, 2, 1, "", "set_device"], [7, 2, 1, "", "step"], [7, 2, 1, "", "train"]], "rlcard.agents.dqn_agent.Estimator": [[7, 2, 1, "", "checkpoint_attributes"], [7, 2, 1, "", "from_checkpoint"], [7, 2, 1, "", "predict_nograd"], [7, 2, 1, "", "update"]], "rlcard.agents.dqn_agent.EstimatorNetwork": [[7, 2, 1, "", "forward"]], "rlcard.agents.dqn_agent.Memory": [[7, 2, 1, "", "checkpoint_attributes"], [7, 2, 1, "", "from_checkpoint"], [7, 2, 1, "", "sample"], [7, 2, 1, "", "save"]], "rlcard.agents.dqn_agent.Transition": [[7, 4, 1, "", "action"], [7, 4, 1, "", "done"], [7, 4, 1, "", "legal_actions"], [7, 4, 1, "", "next_state"], [7, 4, 1, "", "reward"], [7, 4, 1, "", "state"]], "rlcard.agents.human_agents": [[7, 0, 0, "-", "blackjack_human_agent"], [7, 0, 0, "-", "leduc_holdem_human_agent"], [7, 0, 0, "-", "limit_holdem_human_agent"], [7, 0, 0, "-", "nolimit_holdem_human_agent"], [7, 0, 0, "-", "uno_human_agent"]], "rlcard.agents.human_agents.blackjack_human_agent": [[7, 1, 1, "", "HumanAgent"]], "rlcard.agents.human_agents.blackjack_human_agent.HumanAgent": [[7, 2, 1, "", "eval_step"], [7, 2, 1, "", "step"]], "rlcard.agents.human_agents.leduc_holdem_human_agent": [[7, 1, 1, "", "HumanAgent"]], "rlcard.agents.human_agents.leduc_holdem_human_agent.HumanAgent": [[7, 2, 1, "", "eval_step"], [7, 2, 1, "", "step"]], "rlcard.agents.human_agents.limit_holdem_human_agent": [[7, 1, 1, "", "HumanAgent"]], "rlcard.agents.human_agents.limit_holdem_human_agent.HumanAgent": [[7, 2, 1, "", "eval_step"], [7, 2, 1, "", "step"]], "rlcard.agents.human_agents.nolimit_holdem_human_agent": [[7, 1, 1, "", "HumanAgent"]], "rlcard.agents.human_agents.nolimit_holdem_human_agent.HumanAgent": [[7, 2, 1, "", "eval_step"], [7, 2, 1, "", "step"]], "rlcard.agents.human_agents.uno_human_agent": [[7, 1, 1, "", "HumanAgent"]], "rlcard.agents.human_agents.uno_human_agent.HumanAgent": [[7, 2, 1, "", "eval_step"], [7, 2, 1, "", "step"]], "rlcard.agents.nfsp_agent": [[7, 1, 1, "", "AveragePolicyNetwork"], [7, 1, 1, "", "NFSPAgent"], [7, 1, 1, "", "ReservoirBuffer"], [7, 1, 1, "", "Transition"]], "rlcard.agents.nfsp_agent.AveragePolicyNetwork": [[7, 2, 1, "", "checkpoint_attributes"], [7, 2, 1, "", "forward"], [7, 2, 1, "", "from_checkpoint"]], "rlcard.agents.nfsp_agent.NFSPAgent": [[7, 2, 1, "", "checkpoint_attributes"], [7, 2, 1, "", "eval_step"], [7, 2, 1, "", "feed"], [7, 2, 1, "", "from_checkpoint"], [7, 2, 1, "", "sample_episode_policy"], [7, 2, 1, "", "save_checkpoint"], [7, 2, 1, "", "set_device"], [7, 2, 1, "", "step"], [7, 2, 1, "", "train_sl"]], "rlcard.agents.nfsp_agent.ReservoirBuffer": [[7, 2, 1, "", "add"], [7, 2, 1, "", "checkpoint_attributes"], [7, 2, 1, "", "clear"], [7, 2, 1, "", "from_checkpoint"], [7, 2, 1, "", "sample"]], "rlcard.agents.nfsp_agent.Transition": [[7, 4, 1, "", "action_probs"], [7, 4, 1, "", "info_state"]], "rlcard.agents.pettingzoo_agents": [[7, 1, 1, "", "DQNAgentPettingZoo"], [7, 1, 1, "", "NFSPAgentPettingZoo"], [7, 1, 1, "", "RandomAgentPettingZoo"]], "rlcard.agents.pettingzoo_agents.DQNAgentPettingZoo": [[7, 2, 1, "", "eval_step"], [7, 2, 1, "", "feed"], [7, 2, 1, "", "step"]], "rlcard.agents.pettingzoo_agents.NFSPAgentPettingZoo": [[7, 2, 1, "", "eval_step"], [7, 2, 1, "", "feed"], [7, 2, 1, "", "step"]], "rlcard.agents.pettingzoo_agents.RandomAgentPettingZoo": [[7, 2, 1, "", "eval_step"], [7, 2, 1, "", "step"]], "rlcard.agents.random_agent": [[7, 1, 1, "", "RandomAgent"]], "rlcard.agents.random_agent.RandomAgent": [[7, 2, 1, "", "eval_step"], [7, 2, 1, "", "step"]], "rlcard.envs": [[8, 0, 0, "-", "blackjack"], [8, 0, 0, "-", "bridge"], [8, 0, 0, "-", "doudizhu"], [8, 0, 0, "-", "env"], [8, 0, 0, "-", "gin_rummy"], [8, 0, 0, "-", "leducholdem"], [8, 0, 0, "-", "limitholdem"], [8, 0, 0, "-", "mahjong"], [8, 0, 0, "-", "nolimitholdem"], [8, 0, 0, "-", "registration"], [8, 0, 0, "-", "uno"]], "rlcard.envs.blackjack": [[8, 1, 1, "", "BlackjackEnv"], [8, 3, 1, "", "get_score"]], "rlcard.envs.blackjack.BlackjackEnv": [[8, 2, 1, "", "get_payoffs"]], "rlcard.envs.bridge": [[8, 1, 1, "", "BridgeEnv"], [8, 1, 1, "", "BridgePayoffDelegate"], [8, 1, 1, "", "BridgeStateExtractor"], [8, 1, 1, "", "DefaultBridgePayoffDelegate"], [8, 1, 1, "", "DefaultBridgeStateExtractor"]], "rlcard.envs.bridge.BridgeEnv": [[8, 2, 1, "", "get_payoffs"], [8, 2, 1, "", "get_perfect_information"]], "rlcard.envs.bridge.BridgePayoffDelegate": [[8, 2, 1, "", "get_payoffs"]], "rlcard.envs.bridge.BridgeStateExtractor": [[8, 2, 1, "", "extract_state"], [8, 2, 1, "", "get_legal_actions"], [8, 2, 1, "", "get_state_shape_size"]], "rlcard.envs.bridge.DefaultBridgePayoffDelegate": [[8, 2, 1, "", "get_payoffs"]], "rlcard.envs.bridge.DefaultBridgeStateExtractor": [[8, 2, 1, "", "extract_state"], [8, 2, 1, "", "get_state_shape_size"]], "rlcard.envs.doudizhu": [[8, 1, 1, "", "DoudizhuEnv"]], "rlcard.envs.doudizhu.DoudizhuEnv": [[8, 2, 1, "", "get_action_feature"], [8, 2, 1, "", "get_payoffs"], [8, 2, 1, "", "get_perfect_information"]], "rlcard.envs.env": [[8, 1, 1, "", "Env"]], "rlcard.envs.env.Env": [[8, 2, 1, "", "get_action_feature"], [8, 2, 1, "", "get_payoffs"], [8, 2, 1, "", "get_perfect_information"], [8, 2, 1, "", "get_player_id"], [8, 2, 1, "", "get_state"], [8, 2, 1, "", "is_over"], [8, 2, 1, "", "reset"], [8, 2, 1, "", "run"], [8, 2, 1, "", "seed"], [8, 2, 1, "", "set_agents"], [8, 2, 1, "", "step"], [8, 2, 1, "", "step_back"]], "rlcard.envs.gin_rummy": [[8, 1, 1, "", "GinRummyEnv"]], "rlcard.envs.gin_rummy.GinRummyEnv": [[8, 2, 1, "", "get_payoffs"]], "rlcard.envs.leducholdem": [[8, 1, 1, "", "LeducholdemEnv"]], "rlcard.envs.leducholdem.LeducholdemEnv": [[8, 2, 1, "", "get_payoffs"], [8, 2, 1, "", "get_perfect_information"]], "rlcard.envs.limitholdem": [[8, 1, 1, "", "LimitholdemEnv"]], "rlcard.envs.limitholdem.LimitholdemEnv": [[8, 2, 1, "", "get_payoffs"], [8, 2, 1, "", "get_perfect_information"]], "rlcard.envs.mahjong": [[8, 1, 1, "", "MahjongEnv"]], "rlcard.envs.mahjong.MahjongEnv": [[8, 2, 1, "", "get_payoffs"]], "rlcard.envs.nolimitholdem": [[8, 1, 1, "", "NolimitholdemEnv"]], "rlcard.envs.nolimitholdem.NolimitholdemEnv": [[8, 2, 1, "", "get_payoffs"], [8, 2, 1, "", "get_perfect_information"]], "rlcard.envs.registration": [[8, 1, 1, "", "EnvRegistry"], [8, 1, 1, "", "EnvSpec"], [8, 3, 1, "", "make"], [8, 3, 1, "", "register"]], "rlcard.envs.registration.EnvRegistry": [[8, 2, 1, "", "make"], [8, 2, 1, "", "register"]], "rlcard.envs.registration.EnvSpec": [[8, 2, 1, "", "make"]], "rlcard.envs.uno": [[8, 1, 1, "", "UnoEnv"]], "rlcard.envs.uno.UnoEnv": [[8, 2, 1, "", "get_payoffs"], [8, 2, 1, "", "get_perfect_information"]], "rlcard.games.blackjack": [[10, 0, 0, "-", "dealer"], [10, 0, 0, "-", "game"], [10, 0, 0, "-", "judger"], [10, 0, 0, "-", "player"]], "rlcard.games.blackjack.dealer": [[10, 1, 1, "", "BlackjackDealer"]], "rlcard.games.blackjack.dealer.BlackjackDealer": [[10, 2, 1, "", "deal_card"], [10, 2, 1, "", "shuffle"]], "rlcard.games.blackjack.game": [[10, 1, 1, "", "BlackjackGame"]], "rlcard.games.blackjack.game.BlackjackGame": [[10, 2, 1, "", "configure"], [10, 2, 1, "", "get_num_actions"], [10, 2, 1, "", "get_num_players"], [10, 2, 1, "", "get_player_id"], [10, 2, 1, "", "get_state"], [10, 2, 1, "", "init_game"], [10, 2, 1, "", "is_over"], [10, 2, 1, "", "step"], [10, 2, 1, "", "step_back"]], "rlcard.games.blackjack.judger": [[10, 1, 1, "", "BlackjackJudger"]], "rlcard.games.blackjack.judger.BlackjackJudger": [[10, 2, 1, "", "judge_game"], [10, 2, 1, "", "judge_round"], [10, 2, 1, "", "judge_score"]], "rlcard.games.blackjack.player": [[10, 1, 1, "", "BlackjackPlayer"]], "rlcard.games.blackjack.player.BlackjackPlayer": [[10, 2, 1, "", "get_player_id"]], "rlcard.games.bridge": [[11, 0, 0, "-", "dealer"], [11, 0, 0, "-", "game"], [11, 0, 0, "-", "judger"], [11, 0, 0, "-", "player"], [11, 0, 0, "-", "round"]], "rlcard.games.bridge.dealer": [[11, 1, 1, "", "BridgeDealer"]], "rlcard.games.bridge.dealer.BridgeDealer": [[11, 2, 1, "", "deal_cards"]], "rlcard.games.bridge.game": [[11, 1, 1, "", "BridgeGame"]], "rlcard.games.bridge.game.BridgeGame": [[11, 2, 1, "", "get_num_actions"], [11, 2, 1, "", "get_num_players"], [11, 2, 1, "", "get_player_id"], [11, 2, 1, "", "get_state"], [11, 2, 1, "", "init_game"], [11, 2, 1, "", "is_over"], [11, 2, 1, "", "step"]], "rlcard.games.bridge.judger": [[11, 1, 1, "", "BridgeJudger"]], "rlcard.games.bridge.judger.BridgeJudger": [[11, 2, 1, "", "get_legal_actions"]], "rlcard.games.bridge.player": [[11, 1, 1, "", "BridgePlayer"]], "rlcard.games.bridge.player.BridgePlayer": [[11, 2, 1, "", "remove_card_from_hand"]], "rlcard.games.bridge.round": [[11, 1, 1, "", "BridgeRound"]], "rlcard.games.bridge.round.BridgeRound": [[11, 5, 1, "", "board_id"], [11, 5, 1, "", "dealer_id"], [11, 2, 1, "", "get_current_player"], [11, 2, 1, "", "get_declarer"], [11, 2, 1, "", "get_dummy"], [11, 2, 1, "", "get_left_defender"], [11, 2, 1, "", "get_perfect_information"], [11, 2, 1, "", "get_right_defender"], [11, 2, 1, "", "get_trick_moves"], [11, 2, 1, "", "get_trump_suit"], [11, 2, 1, "", "is_bidding_over"], [11, 2, 1, "", "is_over"], [11, 2, 1, "", "make_call"], [11, 2, 1, "", "play_card"], [11, 2, 1, "", "print_scene"], [11, 5, 1, "", "round_phase"], [11, 5, 1, "", "vul"]], "rlcard.games.doudizhu": [[12, 0, 0, "-", "dealer"], [12, 0, 0, "-", "game"], [12, 0, 0, "-", "judger"], [12, 0, 0, "-", "player"], [12, 0, 0, "-", "round"]], "rlcard.games.doudizhu.dealer": [[12, 1, 1, "", "DoudizhuDealer"]], "rlcard.games.doudizhu.dealer.DoudizhuDealer": [[12, 2, 1, "", "deal_cards"], [12, 2, 1, "", "determine_role"], [12, 2, 1, "", "shuffle"]], "rlcard.games.doudizhu.game": [[12, 1, 1, "", "DoudizhuGame"]], "rlcard.games.doudizhu.game.DoudizhuGame": [[12, 2, 1, "", "get_num_actions"], [12, 2, 1, "", "get_num_players"], [12, 2, 1, "", "get_player_id"], [12, 2, 1, "", "get_state"], [12, 2, 1, "", "init_game"], [12, 2, 1, "", "is_over"], [12, 2, 1, "", "step"], [12, 2, 1, "", "step_back"]], "rlcard.games.doudizhu.judger": [[12, 1, 1, "", "DoudizhuJudger"]], "rlcard.games.doudizhu.judger.DoudizhuJudger": [[12, 2, 1, "", "calc_playable_cards"], [12, 2, 1, "", "chain_indexes"], [12, 2, 1, "", "get_playable_cards"], [12, 2, 1, "", "judge_game"], [12, 2, 1, "", "judge_payoffs"], [12, 2, 1, "", "pair_attachments"], [12, 2, 1, "", "playable_cards_from_hand"], [12, 2, 1, "", "restore_playable_cards"], [12, 2, 1, "", "solo_attachments"]], "rlcard.games.doudizhu.player": [[12, 1, 1, "", "DoudizhuPlayer"]], "rlcard.games.doudizhu.player.DoudizhuPlayer": [[12, 2, 1, "", "available_actions"], [12, 5, 1, "", "current_hand"], [12, 2, 1, "", "get_state"], [12, 2, 1, "", "play"], [12, 2, 1, "", "play_back"], [12, 2, 1, "", "set_current_hand"]], "rlcard.games.doudizhu.round": [[12, 1, 1, "", "DoudizhuRound"]], "rlcard.games.doudizhu.round.DoudizhuRound": [[12, 2, 1, "", "cards_ndarray_to_str"], [12, 2, 1, "", "find_last_greater_player_id_in_trace"], [12, 2, 1, "", "find_last_played_cards_in_trace"], [12, 2, 1, "", "initiate"], [12, 2, 1, "", "proceed_round"], [12, 2, 1, "", "step_back"], [12, 2, 1, "", "update_public"]], "rlcard.games.gin_rummy": [[13, 0, 0, "-", "dealer"], [13, 0, 0, "-", "game"], [13, 0, 0, "-", "judge"], [13, 0, 0, "-", "player"], [13, 0, 0, "-", "round"]], "rlcard.games.gin_rummy.dealer": [[13, 1, 1, "", "GinRummyDealer"]], "rlcard.games.gin_rummy.dealer.GinRummyDealer": [[13, 2, 1, "", "deal_cards"]], "rlcard.games.gin_rummy.game": [[13, 1, 1, "", "GinRummyGame"]], "rlcard.games.gin_rummy.game.GinRummyGame": [[13, 2, 1, "", "decode_action"], [13, 2, 1, "", "get_current_player"], [13, 2, 1, "", "get_last_action"], [13, 2, 1, "", "get_num_actions"], [13, 2, 1, "", "get_num_players"], [13, 2, 1, "", "get_player_id"], [13, 2, 1, "", "get_state"], [13, 2, 1, "", "init_game"], [13, 2, 1, "", "is_over"], [13, 2, 1, "", "step"], [13, 2, 1, "", "step_back"]], "rlcard.games.gin_rummy.judge": [[13, 1, 1, "", "GinRummyJudge"], [13, 3, 1, "", "get_going_out_cards"]], "rlcard.games.gin_rummy.judge.GinRummyJudge": [[13, 2, 1, "", "get_legal_actions"]], "rlcard.games.gin_rummy.player": [[13, 1, 1, "", "GinRummyPlayer"]], "rlcard.games.gin_rummy.player.GinRummyPlayer": [[13, 2, 1, "", "add_card_to_hand"], [13, 2, 1, "", "did_populate_hand"], [13, 2, 1, "", "get_meld_clusters"], [13, 2, 1, "", "get_player_id"], [13, 2, 1, "", "opponent_id_of"], [13, 2, 1, "", "remove_card_from_hand"], [13, 2, 1, "", "short_name_of"]], "rlcard.games.gin_rummy.round": [[13, 1, 1, "", "GinRummyRound"]], "rlcard.games.gin_rummy.round.GinRummyRound": [[13, 2, 1, "", "declare_dead_hand"], [13, 2, 1, "", "discard"], [13, 2, 1, "", "draw_card"], [13, 2, 1, "", "get_current_player"], [13, 2, 1, "", "gin"], [13, 2, 1, "", "knock"], [13, 2, 1, "", "pick_up_discard"], [13, 2, 1, "", "score_player_0"], [13, 2, 1, "", "score_player_1"]], "rlcard.games.gin_rummy.utils": [[14, 0, 0, "-", "action_event"], [14, 0, 0, "-", "gin_rummy_error"], [14, 0, 0, "-", "melding"], [14, 0, 0, "-", "move"], [14, 0, 0, "-", "scorers"], [14, 0, 0, "-", "settings"], [14, 0, 0, "-", "thinker"], [14, 0, 0, "-", "utils"]], "rlcard.games.gin_rummy.utils.action_event": [[14, 1, 1, "", "ActionEvent"], [14, 1, 1, "", "DeclareDeadHandAction"], [14, 1, 1, "", "DiscardAction"], [14, 1, 1, "", "DrawCardAction"], [14, 1, 1, "", "GinAction"], [14, 1, 1, "", "KnockAction"], [14, 1, 1, "", "PickUpDiscardAction"], [14, 1, 1, "", "ScoreNorthPlayerAction"], [14, 1, 1, "", "ScoreSouthPlayerAction"]], "rlcard.games.gin_rummy.utils.action_event.ActionEvent": [[14, 2, 1, "", "decode_action"], [14, 2, 1, "", "get_num_actions"]], "rlcard.games.gin_rummy.utils.gin_rummy_error": [[14, 6, 1, "", "GinRummyError"], [14, 6, 1, "", "GinRummyProgramError"]], "rlcard.games.gin_rummy.utils.melding": [[14, 3, 1, "", "get_all_run_melds"], [14, 3, 1, "", "get_all_run_melds_for_suit"], [14, 3, 1, "", "get_all_set_melds"], [14, 3, 1, "", "get_best_meld_clusters"], [14, 3, 1, "", "get_meld_clusters"]], "rlcard.games.gin_rummy.utils.move": [[14, 1, 1, "", "DealHandMove"], [14, 1, 1, "", "DeclareDeadHandMove"], [14, 1, 1, "", "DiscardMove"], [14, 1, 1, "", "DrawCardMove"], [14, 1, 1, "", "GinMove"], [14, 1, 1, "", "GinRummyMove"], [14, 1, 1, "", "KnockMove"], [14, 1, 1, "", "PickupDiscardMove"], [14, 1, 1, "", "PlayerMove"], [14, 1, 1, "", "ScoreNorthMove"], [14, 1, 1, "", "ScoreSouthMove"]], "rlcard.games.gin_rummy.utils.scorers": [[14, 1, 1, "", "GinRummyScorer"], [14, 3, 1, "", "get_payoff_gin_rummy_v0"], [14, 3, 1, "", "get_payoff_gin_rummy_v1"]], "rlcard.games.gin_rummy.utils.scorers.GinRummyScorer": [[14, 2, 1, "", "get_payoffs"]], "rlcard.games.gin_rummy.utils.settings": [[14, 1, 1, "", "DealerForRound"], [14, 1, 1, "", "Setting"], [14, 1, 1, "", "Settings"]], "rlcard.games.gin_rummy.utils.settings.DealerForRound": [[14, 4, 1, "", "North"], [14, 4, 1, "", "Random"], [14, 4, 1, "", "South"]], "rlcard.games.gin_rummy.utils.settings.Setting": [[14, 4, 1, "", "dealer_for_round"], [14, 2, 1, "", "default_setting"], [14, 4, 1, "", "going_out_deadwood_count"], [14, 4, 1, "", "is_allowed_gin"], [14, 4, 1, "", "is_allowed_knock"], [14, 4, 1, "", "is_allowed_pick_up_discard"], [14, 4, 1, "", "is_allowed_to_discard_picked_up_card"], [14, 4, 1, "", "is_always_knock"], [14, 4, 1, "", "is_south_never_knocks"], [14, 4, 1, "", "max_drawn_card_count"], [14, 4, 1, "", "max_move_count"], [14, 2, 1, "", "simple_gin_rummy_setting"], [14, 4, 1, "", "stockpile_dead_card_count"]], "rlcard.games.gin_rummy.utils.settings.Settings": [[14, 2, 1, "", "change_settings"], [14, 2, 1, "", "get_config_with_invalid_settings_set_to_default_value"], [14, 2, 1, "", "print_settings"]], "rlcard.games.gin_rummy.utils.thinker": [[14, 1, 1, "", "Thinker"]], "rlcard.games.gin_rummy.utils.thinker.Thinker": [[14, 2, 1, "", "get_meld_piles_with_discard_card"]], "rlcard.games.gin_rummy.utils.utils": [[14, 3, 1, "", "card_from_card_id"], [14, 3, 1, "", "card_from_text"], [14, 3, 1, "", "decode_cards"], [14, 3, 1, "", "encode_cards"], [14, 3, 1, "", "get_card"], [14, 3, 1, "", "get_card_id"], [14, 3, 1, "", "get_deadwood"], [14, 3, 1, "", "get_deadwood_count"], [14, 3, 1, "", "get_deadwood_value"], [14, 3, 1, "", "get_deck"], [14, 3, 1, "", "get_rank_id"], [14, 3, 1, "", "get_suit_id"]], "rlcard.games.leducholdem": [[15, 0, 0, "-", "dealer"], [15, 0, 0, "-", "game"], [15, 0, 0, "-", "judger"], [15, 0, 0, "-", "player"], [15, 0, 0, "-", "round"]], "rlcard.games.leducholdem.dealer": [[15, 1, 1, "", "LeducholdemDealer"]], "rlcard.games.leducholdem.game": [[15, 1, 1, "", "LeducholdemGame"]], "rlcard.games.leducholdem.game.LeducholdemGame": [[15, 2, 1, "", "configure"], [15, 2, 1, "", "get_payoffs"], [15, 2, 1, "", "get_state"], [15, 2, 1, "", "init_game"], [15, 2, 1, "", "is_over"], [15, 4, 1, "", "np_random"], [15, 2, 1, "", "step"], [15, 2, 1, "", "step_back"]], "rlcard.games.leducholdem.judger": [[15, 1, 1, "", "LeducholdemJudger"]], "rlcard.games.leducholdem.judger.LeducholdemJudger": [[15, 2, 1, "", "judge_game"]], "rlcard.games.leducholdem.player": [[15, 1, 1, "", "LeducholdemPlayer"]], "rlcard.games.leducholdem.player.LeducholdemPlayer": [[15, 2, 1, "", "get_player_id"], [15, 2, 1, "", "get_state"]], "rlcard.games.leducholdem.round": [[15, 1, 1, "", "LeducholdemRound"]], "rlcard.games.limitholdem": [[16, 0, 0, "-", "dealer"], [16, 0, 0, "-", "game"], [16, 0, 0, "-", "judger"], [16, 0, 0, "-", "player"], [16, 0, 0, "-", "round"], [16, 0, 0, "-", "utils"]], "rlcard.games.limitholdem.dealer": [[16, 1, 1, "", "LimitHoldemDealer"]], "rlcard.games.limitholdem.dealer.LimitHoldemDealer": [[16, 2, 1, "", "deal_card"], [16, 2, 1, "", "shuffle"]], "rlcard.games.limitholdem.game": [[16, 1, 1, "", "LimitHoldemGame"]], "rlcard.games.limitholdem.game.LimitHoldemGame": [[16, 2, 1, "", "configure"], [16, 2, 1, "", "get_legal_actions"], [16, 2, 1, "", "get_num_actions"], [16, 2, 1, "", "get_num_players"], [16, 2, 1, "", "get_payoffs"], [16, 2, 1, "", "get_player_id"], [16, 2, 1, "", "get_state"], [16, 2, 1, "", "init_game"], [16, 2, 1, "", "is_over"], [16, 2, 1, "", "step"], [16, 2, 1, "", "step_back"]], "rlcard.games.limitholdem.judger": [[16, 1, 1, "", "LimitHoldemJudger"]], "rlcard.games.limitholdem.judger.LimitHoldemJudger": [[16, 2, 1, "", "judge_game"], [16, 2, 1, "", "split_pot_among_players"], [16, 2, 1, "", "split_pots_among_players"]], "rlcard.games.limitholdem.player": [[16, 1, 1, "", "LimitHoldemPlayer"], [16, 1, 1, "", "PlayerStatus"]], "rlcard.games.limitholdem.player.LimitHoldemPlayer": [[16, 2, 1, "", "get_player_id"], [16, 2, 1, "", "get_state"]], "rlcard.games.limitholdem.player.PlayerStatus": [[16, 4, 1, "", "ALIVE"], [16, 4, 1, "", "ALLIN"], [16, 4, 1, "", "FOLDED"]], "rlcard.games.limitholdem.round": [[16, 1, 1, "", "LimitHoldemRound"]], "rlcard.games.limitholdem.round.LimitHoldemRound": [[16, 2, 1, "", "get_legal_actions"], [16, 2, 1, "", "is_over"], [16, 2, 1, "", "proceed_round"], [16, 2, 1, "", "start_new_round"]], "rlcard.games.limitholdem.utils": [[16, 1, 1, "", "Hand"], [16, 3, 1, "", "compare_hands"], [16, 3, 1, "", "compare_ranks"], [16, 3, 1, "", "determine_winner"], [16, 3, 1, "", "determine_winner_four_of_a_kind"], [16, 3, 1, "", "determine_winner_straight"], [16, 3, 1, "", "final_compare"]], "rlcard.games.limitholdem.utils.Hand": [[16, 2, 1, "", "evaluateHand"], [16, 2, 1, "", "get_hand_five_cards"]], "rlcard.games.mahjong": [[17, 0, 0, "-", "card"], [17, 0, 0, "-", "dealer"], [17, 0, 0, "-", "game"], [17, 0, 0, "-", "judger"], [17, 0, 0, "-", "player"], [17, 0, 0, "-", "round"], [17, 0, 0, "-", "utils"]], "rlcard.games.mahjong.card": [[17, 1, 1, "", "MahjongCard"]], "rlcard.games.mahjong.card.MahjongCard": [[17, 2, 1, "", "get_str"], [17, 4, 1, "", "info"], [17, 2, 1, "", "set_index_num"]], "rlcard.games.mahjong.dealer": [[17, 1, 1, "", "MahjongDealer"]], "rlcard.games.mahjong.dealer.MahjongDealer": [[17, 2, 1, "", "deal_cards"], [17, 2, 1, "", "shuffle"]], "rlcard.games.mahjong.game": [[17, 1, 1, "", "MahjongGame"]], "rlcard.games.mahjong.game.MahjongGame": [[17, 2, 1, "", "get_legal_actions"], [17, 2, 1, "", "get_num_actions"], [17, 2, 1, "", "get_num_players"], [17, 2, 1, "", "get_player_id"], [17, 2, 1, "", "get_state"], [17, 2, 1, "", "init_game"], [17, 2, 1, "", "is_over"], [17, 2, 1, "", "step"], [17, 2, 1, "", "step_back"]], "rlcard.games.mahjong.judger": [[17, 1, 1, "", "MahjongJudger"]], "rlcard.games.mahjong.judger.MahjongJudger": [[17, 2, 1, "", "cal_set"], [17, 2, 1, "", "check_consecutive"], [17, 2, 1, "", "judge_chow"], [17, 2, 1, "", "judge_game"], [17, 2, 1, "", "judge_hu"], [17, 2, 1, "", "judge_pong_gong"]], "rlcard.games.mahjong.player": [[17, 1, 1, "", "MahjongPlayer"]], "rlcard.games.mahjong.player.MahjongPlayer": [[17, 2, 1, "", "chow"], [17, 2, 1, "", "get_player_id"], [17, 2, 1, "", "gong"], [17, 2, 1, "", "play_card"], [17, 2, 1, "", "pong"], [17, 2, 1, "", "print_hand"], [17, 2, 1, "", "print_pile"]], "rlcard.games.mahjong.round": [[17, 1, 1, "", "MahjongRound"]], "rlcard.games.mahjong.round.MahjongRound": [[17, 2, 1, "", "get_state"], [17, 2, 1, "", "proceed_round"]], "rlcard.games.mahjong.utils": [[17, 3, 1, "", "cards2list"], [17, 3, 1, "", "encode_cards"], [17, 3, 1, "", "init_deck"], [17, 3, 1, "", "pile2list"]], "rlcard.games.nolimitholdem": [[18, 0, 0, "-", "dealer"], [18, 0, 0, "-", "game"], [18, 0, 0, "-", "judger"], [18, 0, 0, "-", "player"], [18, 0, 0, "-", "round"]], "rlcard.games.nolimitholdem.dealer": [[18, 1, 1, "", "NolimitholdemDealer"]], "rlcard.games.nolimitholdem.game": [[18, 1, 1, "", "NolimitholdemGame"], [18, 1, 1, "", "Stage"]], "rlcard.games.nolimitholdem.game.NolimitholdemGame": [[18, 2, 1, "", "configure"], [18, 2, 1, "", "get_legal_actions"], [18, 2, 1, "", "get_num_actions"], [18, 2, 1, "", "get_num_players"], [18, 2, 1, "", "get_payoffs"], [18, 2, 1, "", "get_state"], [18, 2, 1, "", "init_game"], [18, 2, 1, "", "step"], [18, 2, 1, "", "step_back"]], "rlcard.games.nolimitholdem.game.Stage": [[18, 4, 1, "", "END_HIDDEN"], [18, 4, 1, "", "FLOP"], [18, 4, 1, "", "PREFLOP"], [18, 4, 1, "", "RIVER"], [18, 4, 1, "", "SHOWDOWN"], [18, 4, 1, "", "TURN"]], "rlcard.games.nolimitholdem.judger": [[18, 1, 1, "", "NolimitholdemJudger"]], "rlcard.games.nolimitholdem.player": [[18, 1, 1, "", "NolimitholdemPlayer"]], "rlcard.games.nolimitholdem.player.NolimitholdemPlayer": [[18, 2, 1, "", "bet"]], "rlcard.games.nolimitholdem.round": [[18, 1, 1, "", "Action"], [18, 1, 1, "", "NolimitholdemRound"]], "rlcard.games.nolimitholdem.round.Action": [[18, 4, 1, "", "ALL_IN"], [18, 4, 1, "", "CHECK_CALL"], [18, 4, 1, "", "FOLD"], [18, 4, 1, "", "RAISE_HALF_POT"], [18, 4, 1, "", "RAISE_POT"]], "rlcard.games.nolimitholdem.round.NolimitholdemRound": [[18, 2, 1, "", "get_nolimit_legal_actions"], [18, 2, 1, "", "is_over"], [18, 2, 1, "", "proceed_round"], [18, 2, 1, "", "start_new_round"]], "rlcard.games.uno": [[19, 0, 0, "-", "card"], [19, 0, 0, "-", "dealer"], [19, 0, 0, "-", "game"], [19, 0, 0, "-", "judger"], [19, 0, 0, "-", "player"], [19, 0, 0, "-", "round"], [19, 0, 0, "-", "utils"]], "rlcard.games.uno.card": [[19, 1, 1, "", "UnoCard"]], "rlcard.games.uno.card.UnoCard": [[19, 2, 1, "", "get_str"], [19, 4, 1, "", "info"], [19, 2, 1, "", "print_cards"]], "rlcard.games.uno.dealer": [[19, 1, 1, "", "UnoDealer"]], "rlcard.games.uno.dealer.UnoDealer": [[19, 2, 1, "", "deal_cards"], [19, 2, 1, "", "flip_top_card"], [19, 2, 1, "", "shuffle"]], "rlcard.games.uno.game": [[19, 1, 1, "", "UnoGame"]], "rlcard.games.uno.game.UnoGame": [[19, 2, 1, "", "configure"], [19, 2, 1, "", "get_legal_actions"], [19, 2, 1, "", "get_num_actions"], [19, 2, 1, "", "get_num_players"], [19, 2, 1, "", "get_payoffs"], [19, 2, 1, "", "get_player_id"], [19, 2, 1, "", "get_state"], [19, 2, 1, "", "init_game"], [19, 2, 1, "", "is_over"], [19, 2, 1, "", "step"], [19, 2, 1, "", "step_back"]], "rlcard.games.uno.judger": [[19, 1, 1, "", "UnoJudger"]], "rlcard.games.uno.judger.UnoJudger": [[19, 2, 1, "", "judge_winner"]], "rlcard.games.uno.player": [[19, 1, 1, "", "UnoPlayer"]], "rlcard.games.uno.player.UnoPlayer": [[19, 2, 1, "", "get_player_id"]], "rlcard.games.uno.round": [[19, 1, 1, "", "UnoRound"]], "rlcard.games.uno.round.UnoRound": [[19, 2, 1, "", "flip_top_card"], [19, 2, 1, "", "get_legal_actions"], [19, 2, 1, "", "get_state"], [19, 2, 1, "", "perform_top_card"], [19, 2, 1, "", "proceed_round"], [19, 2, 1, "", "replace_deck"]], "rlcard.games.uno.utils": [[19, 3, 1, "", "cards2list"], [19, 3, 1, "", "encode_hand"], [19, 3, 1, "", "encode_target"], [19, 3, 1, "", "hand2dict"], [19, 3, 1, "", "init_deck"]], "rlcard.models": [[20, 0, 0, "-", "bridge_rule_models"], [20, 0, 0, "-", "doudizhu_rule_models"], [20, 0, 0, "-", "gin_rummy_rule_models"], [20, 0, 0, "-", "leducholdem_rule_models"], [20, 0, 0, "-", "limitholdem_rule_models"], [20, 0, 0, "-", "pretrained_models"], [20, 0, 0, "-", "registration"], [20, 0, 0, "-", "uno_rule_models"]], "rlcard.models.bridge_rule_models": [[20, 1, 1, "", "BridgeDefenderNoviceRuleAgent"]], "rlcard.models.bridge_rule_models.BridgeDefenderNoviceRuleAgent": [[20, 2, 1, "", "eval_step"], [20, 2, 1, "", "step"]], "rlcard.models.doudizhu_rule_models": [[20, 1, 1, "", "DouDizhuRuleAgentV1"], [20, 1, 1, "", "DouDizhuRuleModelV1"]], "rlcard.models.doudizhu_rule_models.DouDizhuRuleAgentV1": [[20, 2, 1, "", "card_str2list"], [20, 2, 1, "", "combine_cards"], [20, 2, 1, "", "eval_step"], [20, 2, 1, "", "list2card_str"], [20, 2, 1, "", "pick_chain"], [20, 2, 1, "", "step"]], "rlcard.models.doudizhu_rule_models.DouDizhuRuleModelV1": [[20, 5, 1, "", "agents"]], "rlcard.models.gin_rummy_rule_models": [[20, 1, 1, "", "GinRummyNoviceRuleAgent"], [20, 1, 1, "", "GinRummyNoviceRuleModel"]], "rlcard.models.gin_rummy_rule_models.GinRummyNoviceRuleAgent": [[20, 2, 1, "", "eval_step"], [20, 2, 1, "", "step"]], "rlcard.models.gin_rummy_rule_models.GinRummyNoviceRuleModel": [[20, 5, 1, "", "agents"]], "rlcard.models.leducholdem_rule_models": [[20, 1, 1, "", "LeducHoldemRuleAgentV1"], [20, 1, 1, "", "LeducHoldemRuleAgentV2"], [20, 1, 1, "", "LeducHoldemRuleModelV1"], [20, 1, 1, "", "LeducHoldemRuleModelV2"]], "rlcard.models.leducholdem_rule_models.LeducHoldemRuleAgentV1": [[20, 2, 1, "", "eval_step"], [20, 2, 1, "", "step"]], "rlcard.models.leducholdem_rule_models.LeducHoldemRuleAgentV2": [[20, 2, 1, "", "eval_step"], [20, 2, 1, "", "step"]], "rlcard.models.leducholdem_rule_models.LeducHoldemRuleModelV1": [[20, 5, 1, "", "agents"]], "rlcard.models.leducholdem_rule_models.LeducHoldemRuleModelV2": [[20, 5, 1, "", "agents"]], "rlcard.models.limitholdem_rule_models": [[20, 1, 1, "", "LimitholdemRuleAgentV1"], [20, 1, 1, "", "LimitholdemRuleModelV1"]], "rlcard.models.limitholdem_rule_models.LimitholdemRuleAgentV1": [[20, 2, 1, "", "eval_step"], [20, 2, 1, "", "step"]], "rlcard.models.limitholdem_rule_models.LimitholdemRuleModelV1": [[20, 5, 1, "", "agents"], [20, 5, 1, "", "use_raw"]], "rlcard.models.pretrained_models": [[20, 1, 1, "", "LeducHoldemCFRModel"]], "rlcard.models.pretrained_models.LeducHoldemCFRModel": [[20, 5, 1, "", "agents"]], "rlcard.models.registration": [[20, 1, 1, "", "ModelRegistry"], [20, 1, 1, "", "ModelSpec"], [20, 3, 1, "", "load"], [20, 3, 1, "", "register"]], "rlcard.models.registration.ModelRegistry": [[20, 2, 1, "", "load"], [20, 2, 1, "", "register"]], "rlcard.models.registration.ModelSpec": [[20, 2, 1, "", "load"]], "rlcard.models.uno_rule_models": [[20, 1, 1, "", "UNORuleAgentV1"], [20, 1, 1, "", "UNORuleModelV1"]], "rlcard.models.uno_rule_models.UNORuleAgentV1": [[20, 2, 1, "", "count_colors"], [20, 2, 1, "", "eval_step"], [20, 2, 1, "", "filter_wild"], [20, 2, 1, "", "step"]], "rlcard.models.uno_rule_models.UNORuleModelV1": [[20, 5, 1, "", "agents"], [20, 5, 1, "", "use_raw"]], "rlcard.utils": [[21, 0, 0, "-", "logger"], [21, 0, 0, "-", "pettingzoo_utils"], [21, 0, 0, "-", "seeding"], [21, 0, 0, "-", "utils"]], "rlcard.utils.logger": [[21, 1, 1, "", "Logger"]], "rlcard.utils.logger.Logger": [[21, 2, 1, "", "log"], [21, 2, 1, "", "log_performance"]], "rlcard.utils.pettingzoo_utils": [[21, 3, 1, "", "reorganize_pettingzoo"], [21, 3, 1, "", "run_game_pettingzoo"], [21, 3, 1, "", "tournament_pettingzoo"], [21, 3, 1, "", "wrap_state"]], "rlcard.utils.seeding": [[21, 3, 1, "", "colorize"], [21, 3, 1, "", "create_seed"], [21, 3, 1, "", "error"], [21, 3, 1, "", "hash_seed"], [21, 3, 1, "", "np_random"]], "rlcard.utils.utils": [[21, 3, 1, "", "elegent_form"], [21, 3, 1, "", "get_device"], [21, 3, 1, "", "init_54_deck"], [21, 3, 1, "", "init_standard_deck"], [21, 3, 1, "", "plot_curve"], [21, 3, 1, "", "print_card"], [21, 3, 1, "", "rank2int"], [21, 3, 1, "", "remove_illegal"], [21, 3, 1, "", "reorganize"], [21, 3, 1, "", "set_seed"], [21, 3, 1, "", "tournament"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"algorithm": [0, 1, 5], "deep": [0, 4], "q": [0, 4], "learn": [0, 4, 5], "nfsp": 0, "cfr": [0, 4], "deepcfr": 0, "develop": 1, "ad": 1, "pre": [1, 5], "train": [1, 4, 5], "rule": [1, 5], "base": [1, 5], "model": [1, 4, 5, 7, 20], "new": 1, "environ": [1, 5, 6], "custom": 1, "state": [1, 3, 5], "represent": [1, 3], "action": [1, 3], "encod": [1, 3], "reward": 1, "calcul": 1, "modifi": 1, "game": [1, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "document": 2, "api": [2, 5], "indic": 2, "tabl": 2, "rlcard": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "blackjack": [3, 4, 8, 10], "payoff": 3, "leduc": [3, 4], "hold": [3, 4], "em": [3, 4], "limit": 3, "texa": 3, "dou": [3, 4], "dizhu": [3, 4], "abstract": 3, "simpl": 3, "mahjong": [3, 8, 17], "space": 3, "No": 3, "uno": [3, 8, 19], "gin": 3, "rummi": 3, "set": [3, 14], "variat": 3, "bridg": [3, 8, 11], "get": 4, "start": 4, "plai": 4, "random": 4, "agent": [4, 6, 7], "chanc": 4, "sampl": 4, "have": 4, "fun": 4, "pretrain": 4, "dmc": 4, "evalu": 4, "A": 5, "toolkit": 5, "reinforc": 5, "card": [5, 17, 19], "instal": 5, "exampl": 5, "demo": 5, "avail": 5, "support": 5, "cheat": 5, "sheet": 5, "how": 5, "creat": 5, "an": 5, "what": 5, "i": 5, "basic": 5, "interfac": 5, "advanc": 5, "librari": 5, "structur": 5, "contribut": 5, "acknowledg": 5, "overview": 6, "design": 6, "principl": 6, "high": 6, "level": 6, "cfr_agent": 7, "dqn_agent": 7, "nfsp_agent": 7, "pettingzoo_ag": 7, "random_ag": 7, "dmc_agent": 7, "file_writ": 7, "pettingzoo_model": 7, "pettingzoo_util": [7, 21], "trainer": 7, "util": [7, 14, 16, 17, 19, 21], "human_ag": 7, "blackjack_human_ag": 7, "leduc_holdem_human_ag": 7, "limit_holdem_human_ag": 7, "nolimit_holdem_human_ag": 7, "uno_human_ag": 7, "env": 8, "registr": [8, 20], "doudizhu": [8, 12], "limitholdem": [8, 16], "gin_rummi": [8, 13, 14], "leducholdem": [8, 15], "nolimitholdem": [8, 18], "dealer": [10, 11, 12, 13, 15, 16, 17, 18, 19], "judger": [10, 11, 12, 15, 16, 17, 18, 19], "player": [10, 11, 12, 13, 15, 16, 17, 18, 19], "round": [11, 12, 13, 15, 16, 17, 18, 19], "judg": 13, "action_ev": 14, "gin_rummy_error": 14, "meld": 14, "move": 14, "scorer": 14, "thinker": 14, "bridge_rule_model": 20, "doudizhu_rule_model": 20, "gin_rummy_rule_model": 20, "leducholdem_rule_model": 20, "limitholdem_rule_model": 20, "uno_rule_model": 20, "pretrained_model": 20, "logger": 21, "seed": 21}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Algorithms": [[0, "algorithms"]], "Deep-Q Learning": [[0, "deep-q-learning"]], "NFSP": [[0, "nfsp"]], "CFR": [[0, "cfr"]], "DeepCFR": [[0, "deepcfr"]], "Development": [[1, "development"]], "Adding Pre-trained/Rule-based models": [[1, "adding-pre-trained-rule-based-models"]], "Developping Algorithms": [[1, "developping-algorithms"]], "Adding New Environments": [[1, "adding-new-environments"]], "Customizing Environments": [[1, "customizing-environments"]], "State Representation": [[1, "state-representation"]], "Action Encoding": [[1, "action-encoding"]], "Reward Calculation": [[1, "reward-calculation"]], "Modifying Game": [[1, "modifying-game"]], "Documentation:": [[2, null]], "API Documents:": [[2, null]], "Indices and tables": [[2, "indices-and-tables"]], "Games in RLCard": [[3, "games-in-rlcard"]], "Blackjack": [[3, "blackjack"]], "State Representation of Blackjack": [[3, "state-representation-of-blackjack"]], "Action Encoding of Blackjack": [[3, "action-encoding-of-blackjack"]], "Payoff of Blackjack": [[3, "payoff-of-blackjack"]], "Leduc Hold\u2019em": [[3, "leduc-hold-em"]], "State Representation of Leduc Hold\u2019em": [[3, "state-representation-of-leduc-hold-em"]], "Action Encoding of Leduc Hold\u2019em": [[3, "action-encoding-of-leduc-hold-em"]], "Payoff of Leduc Hold\u2019em": [[3, "payoff-of-leduc-hold-em"]], "Limit Texas Hold\u2019em": [[3, "limit-texas-hold-em"]], "State Representation of Limit Texas Hold\u2019em": [[3, "state-representation-of-limit-texas-hold-em"]], "Action Encoding of Limit Texas Hold\u2019em": [[3, "action-encoding-of-limit-texas-hold-em"]], "Payoff of Limit Texas Hold\u2019em": [[3, "payoff-of-limit-texas-hold-em"]], "Dou Dizhu": [[3, "dou-dizhu"]], "State Representation of Dou Dizhu": [[3, "state-representation-of-dou-dizhu"]], "State Encoding of Dou Dizhu": [[3, "state-encoding-of-dou-dizhu"]], "Action Abstraction of Dou Dizhu": [[3, "action-abstraction-of-dou-dizhu"]], "Payoff": [[3, "payoff"]], "Simple Dou Dizhu": [[3, "simple-dou-dizhu"]], "State Representation of Simple Dou Dizhu": [[3, "state-representation-of-simple-dou-dizhu"]], "State Encoding of Simple Dou Dizhu": [[3, "state-encoding-of-simple-dou-dizhu"]], "Action Encoding of Simple Dou Dizhu": [[3, "action-encoding-of-simple-dou-dizhu"]], "Payoff of Simple Dou Dizhu": [[3, "payoff-of-simple-dou-dizhu"]], "Mahjong": [[3, "mahjong"]], "State Representation of Mahjong": [[3, "state-representation-of-mahjong"]], "Action Space of Mahjong": [[3, "action-space-of-mahjong"]], "Payoff of Mahjong": [[3, "payoff-of-mahjong"]], "No-limit Texas Hold\u2019em": [[3, "no-limit-texas-hold-em"]], "State Representation of No-Limit Texas Hold\u2019em": [[3, "state-representation-of-no-limit-texas-hold-em"]], "Action Encoding of No-Limit Texas Hold\u2019em": [[3, "action-encoding-of-no-limit-texas-hold-em"]], "Payoff of No-Limit Texas Hold\u2019em": [[3, "payoff-of-no-limit-texas-hold-em"]], "UNO": [[3, "uno"]], "State Representation of Uno": [[3, "state-representation-of-uno"]], "State Encoding of Uno": [[3, "state-encoding-of-uno"]], "Action Encoding of Uno": [[3, "action-encoding-of-uno"]], "Payoff of Uno": [[3, "payoff-of-uno"]], "Gin Rummy": [[3, "gin-rummy"]], "State Representation of Gin Rummy": [[3, "state-representation-of-gin-rummy"]], "Action Space of Gin Rummy": [[3, "action-space-of-gin-rummy"]], "Payoff of Gin Rummy": [[3, "payoff-of-gin-rummy"]], "Settings": [[3, "settings"]], "Variations": [[3, "variations"]], "Bridge": [[3, "bridge"]], "State Representation of Bridge": [[3, "state-representation-of-bridge"]], "Action Space of Bridge": [[3, "action-space-of-bridge"]], "Payoff of Bridge": [[3, "payoff-of-bridge"]], "Getting Started": [[4, "getting-started"]], "Playing with Random Agents": [[4, "playing-with-random-agents"]], "Deep-Q Learning on Blackjack": [[4, "deep-q-learning-on-blackjack"]], "Training CFR (chance sampling) on Leduc Hold\u2019em": [[4, "training-cfr-chance-sampling-on-leduc-hold-em"]], "Having Fun with Pretrained Leduc Model": [[4, "having-fun-with-pretrained-leduc-model"]], "Training DMC on Dou Dizhu": [[4, "training-dmc-on-dou-dizhu"]], "Evaluating Agents": [[4, "evaluating-agents"]], "Evaluating DMC on Dou Dizhu": [[4, "evaluating-dmc-on-dou-dizhu"]], "RLCard: A Toolkit for Reinforcement Learning in Card Games": [[5, "rlcard-a-toolkit-for-reinforcement-learning-in-card-games"]], "Installation": [[5, "installation"]], "Examples": [[5, "examples"]], "Demo": [[5, "demo"]], "Available Environments": [[5, "available-environments"]], "Supported Algorithms": [[5, "supported-algorithms"]], "Pre-trained and Rule-based Models": [[5, "pre-trained-and-rule-based-models"]], "API Cheat Sheet": [[5, "api-cheat-sheet"]], "How to create an environment": [[5, "how-to-create-an-environment"]], "What is state in RLCard": [[5, "what-is-state-in-rlcard"]], "Basic interfaces": [[5, "basic-interfaces"]], "Advanced interfaces": [[5, "advanced-interfaces"]], "Library Structure": [[5, "library-structure"]], "Contributing": [[5, "contributing"]], "Acknowledgements": [[5, "acknowledgements"]], "Overview": [[6, "overview"]], "Design Principles": [[6, "design-principles"]], "RLCard High-level Design": [[6, "rlcard-high-level-design"]], "Environments": [[6, "environments"]], "Games": [[6, "games"]], "Agents": [[6, "agents"]], "rlcard.agents": [[7, "rlcard-agents"]], "rlcard.agents.cfr_agent": [[7, "module-rlcard.agents.cfr_agent"]], "rlcard.agents.dqn_agent": [[7, "module-rlcard.agents.dqn_agent"]], "rlcard.agents.nfsp_agent": [[7, "module-rlcard.agents.nfsp_agent"]], "rlcard.agents.pettingzoo_agents": [[7, "module-rlcard.agents.pettingzoo_agents"]], "rlcard.agents.random_agent": [[7, "module-rlcard.agents.random_agent"]], "rlcard.agents.dmc_agent.file_writer": [[7, "module-rlcard.agents.dmc_agent.file_writer"]], "rlcard.agents.dmc_agent.model": [[7, "module-rlcard.agents.dmc_agent.model"]], "rlcard.agents.dmc_agent.pettingzoo_model": [[7, "module-rlcard.agents.dmc_agent.pettingzoo_model"]], "rlcard.agents.dmc_agent.pettingzoo_utils": [[7, "module-rlcard.agents.dmc_agent.pettingzoo_utils"]], "rlcard.agents.dmc_agent.trainer": [[7, "module-rlcard.agents.dmc_agent.trainer"]], "rlcard.agents.dmc_agent.utils": [[7, "module-rlcard.agents.dmc_agent.utils"]], "rlcard.agents.human_agents.blackjack_human_agent": [[7, "module-rlcard.agents.human_agents.blackjack_human_agent"]], "rlcard.agents.human_agents.leduc_holdem_human_agent": [[7, "module-rlcard.agents.human_agents.leduc_holdem_human_agent"]], "rlcard.agents.human_agents.limit_holdem_human_agent": [[7, "module-rlcard.agents.human_agents.limit_holdem_human_agent"]], "rlcard.agents.human_agents.nolimit_holdem_human_agent": [[7, "module-rlcard.agents.human_agents.nolimit_holdem_human_agent"]], "rlcard.agents.human_agents.uno_human_agent": [[7, "module-rlcard.agents.human_agents.uno_human_agent"]], "rlcard.envs": [[8, "rlcard-envs"]], "rlcard.envs.env": [[8, "module-rlcard.envs.env"]], "rlcard.envs.registration": [[8, "module-rlcard.envs.registration"]], "rlcard.envs.blackjack": [[8, "module-rlcard.envs.blackjack"]], "rlcard.envs.doudizhu": [[8, "module-rlcard.envs.doudizhu"]], "rlcard.envs.limitholdem": [[8, "module-rlcard.envs.limitholdem"]], "rlcard.envs.gin_rummy": [[8, "module-rlcard.envs.gin_rummy"]], "rlcard.envs.leducholdem": [[8, "module-rlcard.envs.leducholdem"]], "rlcard.envs.mahjong": [[8, "module-rlcard.envs.mahjong"]], "rlcard.envs.nolimitholdem": [[8, "module-rlcard.envs.nolimitholdem"]], "rlcard.envs.bridge": [[8, "module-rlcard.envs.bridge"]], "rlcard.envs.uno": [[8, "module-rlcard.envs.uno"]], "rlcard.games": [[9, "rlcard-games"]], "rlcard.games.blackjack": [[10, "rlcard-games-blackjack"]], "rlcard.games.blackjack.dealer": [[10, "module-rlcard.games.blackjack.dealer"]], "rlcard.games.blackjack.game": [[10, "module-rlcard.games.blackjack.game"]], "rlcard.games.blackjack.judger": [[10, "module-rlcard.games.blackjack.judger"]], "rlcard.games.blackjack.player": [[10, "module-rlcard.games.blackjack.player"]], "rlcard.games.bridge": [[11, "rlcard-games-bridge"]], "rlcard.games.bridge.dealer": [[11, "module-rlcard.games.bridge.dealer"]], "rlcard.games.bridge.game": [[11, "module-rlcard.games.bridge.game"]], "rlcard.games.bridge.judger": [[11, "module-rlcard.games.bridge.judger"]], "rlcard.games.bridge.player": [[11, "module-rlcard.games.bridge.player"]], "rlcard.games.bridge.round": [[11, "module-rlcard.games.bridge.round"]], "rlcard.games.doudizhu": [[12, "rlcard-games-doudizhu"]], "rlcard.games.doudizhu.dealer": [[12, "module-rlcard.games.doudizhu.dealer"]], "rlcard.games.doudizhu.game": [[12, "module-rlcard.games.doudizhu.game"]], "rlcard.games.doudizhu.judger": [[12, "module-rlcard.games.doudizhu.judger"]], "rlcard.games.doudizhu.player": [[12, "module-rlcard.games.doudizhu.player"]], "rlcard.games.doudizhu.round": [[12, "module-rlcard.games.doudizhu.round"]], "rlcard.games.gin_rummy": [[13, "rlcard-games-gin-rummy"]], "rlcard.games.gin_rummy.dealer": [[13, "module-rlcard.games.gin_rummy.dealer"]], "rlcard.games.gin_rummy.game": [[13, "module-rlcard.games.gin_rummy.game"]], "rlcard.games.gin_rummy.judge": [[13, "module-rlcard.games.gin_rummy.judge"]], "rlcard.games.gin_rummy.player": [[13, "module-rlcard.games.gin_rummy.player"]], "rlcard.games.gin_rummy.round": [[13, "module-rlcard.games.gin_rummy.round"]], "rlcard.games.gin_rummy.utils": [[14, "rlcard-games-gin-rummy-utils"]], "rlcard.games.gin_rummy.utils.action_event": [[14, "module-rlcard.games.gin_rummy.utils.action_event"]], "rlcard.games.gin_rummy.utils.gin_rummy_error": [[14, "module-rlcard.games.gin_rummy.utils.gin_rummy_error"]], "rlcard.games.gin_rummy.utils.melding": [[14, "module-rlcard.games.gin_rummy.utils.melding"]], "rlcard.games.gin_rummy.utils.move": [[14, "module-rlcard.games.gin_rummy.utils.move"]], "rlcard.games.gin_rummy.utils.scorers": [[14, "module-rlcard.games.gin_rummy.utils.scorers"]], "rlcard.games.gin_rummy.utils.settings": [[14, "module-rlcard.games.gin_rummy.utils.settings"]], "rlcard.games.gin_rummy.utils.thinker": [[14, "module-rlcard.games.gin_rummy.utils.thinker"]], "rlcard.games.gin_rummy.utils.utils": [[14, "module-rlcard.games.gin_rummy.utils.utils"]], "rlcard.games.leducholdem": [[15, "rlcard-games-leducholdem"]], "rlcard.games.leducholdem.dealer": [[15, "module-rlcard.games.leducholdem.dealer"]], "rlcard.games.leducholdem.game": [[15, "module-rlcard.games.leducholdem.game"]], "rlcard.games.leducholdem.judger": [[15, "module-rlcard.games.leducholdem.judger"]], "rlcard.games.leducholdem.player": [[15, "module-rlcard.games.leducholdem.player"]], "rlcard.games.leducholdem.round": [[15, "module-rlcard.games.leducholdem.round"]], "rlcard.games.limitholdem": [[16, "rlcard-games-limitholdem"]], "rlcard.games.limitholdem.dealer": [[16, "module-rlcard.games.limitholdem.dealer"]], "rlcard.games.limitholdem.game": [[16, "module-rlcard.games.limitholdem.game"]], "rlcard.games.limitholdem.judger": [[16, "module-rlcard.games.limitholdem.judger"]], "rlcard.games.limitholdem.player": [[16, "module-rlcard.games.limitholdem.player"]], "rlcard.games.limitholdem.round": [[16, "module-rlcard.games.limitholdem.round"]], "rlcard.games.limitholdem.utils": [[16, "module-rlcard.games.limitholdem.utils"]], "rlcard.games.mahjong": [[17, "rlcard-games-mahjong"]], "rlcard.games.mahjong.dealer": [[17, "module-rlcard.games.mahjong.dealer"]], "rlcard.games.mahjong.game": [[17, "module-rlcard.games.mahjong.game"]], "rlcard.games.mahjong.judger": [[17, "module-rlcard.games.mahjong.judger"]], "rlcard.games.mahjong.player": [[17, "module-rlcard.games.mahjong.player"]], "rlcard.games.mahjong.round": [[17, "module-rlcard.games.mahjong.round"]], "rlcard.games.mahjong.card": [[17, "module-rlcard.games.mahjong.card"]], "rlcard.games.mahjong.utils": [[17, "module-rlcard.games.mahjong.utils"]], "rlcard.games.nolimitholdem": [[18, "rlcard-games-nolimitholdem"]], "rlcard.games.nolimitholdem.dealer": [[18, "module-rlcard.games.nolimitholdem.dealer"]], "rlcard.games.nolimitholdem.game": [[18, "module-rlcard.games.nolimitholdem.game"]], "rlcard.games.nolimitholdem.judger": [[18, "module-rlcard.games.nolimitholdem.judger"]], "rlcard.games.nolimitholdem.player": [[18, "module-rlcard.games.nolimitholdem.player"]], "rlcard.games.nolimitholdem.round": [[18, "module-rlcard.games.nolimitholdem.round"]], "rlcard.games.uno": [[19, "rlcard-games-uno"]], "rlcard.games.uno.dealer": [[19, "module-rlcard.games.uno.dealer"]], "rlcard.games.uno.game": [[19, "module-rlcard.games.uno.game"]], "rlcard.games.uno.judger": [[19, "module-rlcard.games.uno.judger"]], "rlcard.games.uno.player": [[19, "module-rlcard.games.uno.player"]], "rlcard.games.uno.round": [[19, "module-rlcard.games.uno.round"]], "rlcard.games.uno.card": [[19, "module-rlcard.games.uno.card"]], "rlcard.games.uno.utils": [[19, "module-rlcard.games.uno.utils"]], "rlcard.models": [[20, "rlcard-models"]], "rlcard.models.bridge_rule_models": [[20, "module-rlcard.models.bridge_rule_models"]], "rlcard.models.doudizhu_rule_models": [[20, "module-rlcard.models.doudizhu_rule_models"]], "rlcard.models.gin_rummy_rule_models": [[20, "module-rlcard.models.gin_rummy_rule_models"]], "rlcard.models.leducholdem_rule_models": [[20, "module-rlcard.models.leducholdem_rule_models"]], "rlcard.models.limitholdem_rule_models": [[20, "module-rlcard.models.limitholdem_rule_models"]], "rlcard.models.uno_rule_models": [[20, "module-rlcard.models.uno_rule_models"]], "rlcard.models.pretrained_models": [[20, "module-rlcard.models.pretrained_models"]], "rlcard.models.registration": [[20, "module-rlcard.models.registration"]], "rlcard.utils": [[21, "rlcard-utils"]], "rlcard.utils.utils": [[21, "module-rlcard.utils.utils"]], "rlcard.utils.logger": [[21, "module-rlcard.utils.logger"]], "rlcard.utils.seeding": [[21, "module-rlcard.utils.seeding"]], "rlcard.utils.pettingzoo_utils": [[21, "module-rlcard.utils.pettingzoo_utils"]]}, "indexentries": {"averagepolicynetwork (class in rlcard.agents.nfsp_agent)": [[7, "rlcard.agents.nfsp_agent.AveragePolicyNetwork"]], "cfragent (class in rlcard.agents.cfr_agent)": [[7, "rlcard.agents.cfr_agent.CFRAgent"]], "dmcagent (class in rlcard.agents.dmc_agent.model)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent"]], "dmcagentpettingzoo (class in rlcard.agents.dmc_agent.pettingzoo_model)": [[7, "rlcard.agents.dmc_agent.pettingzoo_model.DMCAgentPettingZoo"]], "dmcmodel (class in rlcard.agents.dmc_agent.model)": [[7, "rlcard.agents.dmc_agent.model.DMCModel"]], "dmcmodelpettingzoo (class in rlcard.agents.dmc_agent.pettingzoo_model)": [[7, "rlcard.agents.dmc_agent.pettingzoo_model.DMCModelPettingZoo"]], "dmcnet (class in rlcard.agents.dmc_agent.model)": [[7, "rlcard.agents.dmc_agent.model.DMCNet"]], "dmctrainer (class in rlcard.agents.dmc_agent.trainer)": [[7, "rlcard.agents.dmc_agent.trainer.DMCTrainer"]], "dqnagent (class in rlcard.agents.dqn_agent)": [[7, "rlcard.agents.dqn_agent.DQNAgent"]], "dqnagentpettingzoo (class in rlcard.agents.pettingzoo_agents)": [[7, "rlcard.agents.pettingzoo_agents.DQNAgentPettingZoo"]], "estimator (class in rlcard.agents.dqn_agent)": [[7, "rlcard.agents.dqn_agent.Estimator"]], "estimatornetwork (class in rlcard.agents.dqn_agent)": [[7, "rlcard.agents.dqn_agent.EstimatorNetwork"]], "filewriter (class in rlcard.agents.dmc_agent.file_writer)": [[7, "rlcard.agents.dmc_agent.file_writer.FileWriter"]], "humanagent (class in rlcard.agents.human_agents.blackjack_human_agent)": [[7, "rlcard.agents.human_agents.blackjack_human_agent.HumanAgent"]], "humanagent (class in rlcard.agents.human_agents.leduc_holdem_human_agent)": [[7, "rlcard.agents.human_agents.leduc_holdem_human_agent.HumanAgent"]], "humanagent (class in rlcard.agents.human_agents.limit_holdem_human_agent)": [[7, "rlcard.agents.human_agents.limit_holdem_human_agent.HumanAgent"]], "humanagent (class in rlcard.agents.human_agents.nolimit_holdem_human_agent)": [[7, "rlcard.agents.human_agents.nolimit_holdem_human_agent.HumanAgent"]], "humanagent (class in rlcard.agents.human_agents.uno_human_agent)": [[7, "rlcard.agents.human_agents.uno_human_agent.HumanAgent"]], "memory (class in rlcard.agents.dqn_agent)": [[7, "rlcard.agents.dqn_agent.Memory"]], "nfspagent (class in rlcard.agents.nfsp_agent)": [[7, "rlcard.agents.nfsp_agent.NFSPAgent"]], "nfspagentpettingzoo (class in rlcard.agents.pettingzoo_agents)": [[7, "rlcard.agents.pettingzoo_agents.NFSPAgentPettingZoo"]], "randomagent (class in rlcard.agents.random_agent)": [[7, "rlcard.agents.random_agent.RandomAgent"]], "randomagentpettingzoo (class in rlcard.agents.pettingzoo_agents)": [[7, "rlcard.agents.pettingzoo_agents.RandomAgentPettingZoo"]], "reservoirbuffer (class in rlcard.agents.nfsp_agent)": [[7, "rlcard.agents.nfsp_agent.ReservoirBuffer"]], "transition (class in rlcard.agents.dqn_agent)": [[7, "rlcard.agents.dqn_agent.Transition"]], "transition (class in rlcard.agents.nfsp_agent)": [[7, "rlcard.agents.nfsp_agent.Transition"]], "act() (in module rlcard.agents.dmc_agent.utils)": [[7, "rlcard.agents.dmc_agent.utils.act"]], "act_pettingzoo() (in module rlcard.agents.dmc_agent.pettingzoo_utils)": [[7, "rlcard.agents.dmc_agent.pettingzoo_utils.act_pettingzoo"]], "action (rlcard.agents.dqn_agent.transition attribute)": [[7, "rlcard.agents.dqn_agent.Transition.action"]], "action_probs (rlcard.agents.nfsp_agent.transition attribute)": [[7, "rlcard.agents.nfsp_agent.Transition.action_probs"]], "action_probs() (rlcard.agents.cfr_agent.cfragent method)": [[7, "rlcard.agents.cfr_agent.CFRAgent.action_probs"]], "add() (rlcard.agents.nfsp_agent.reservoirbuffer method)": [[7, "rlcard.agents.nfsp_agent.ReservoirBuffer.add"]], "checkpoint_attributes() (rlcard.agents.dqn_agent.dqnagent method)": [[7, "rlcard.agents.dqn_agent.DQNAgent.checkpoint_attributes"]], "checkpoint_attributes() (rlcard.agents.dqn_agent.estimator method)": [[7, "rlcard.agents.dqn_agent.Estimator.checkpoint_attributes"]], "checkpoint_attributes() (rlcard.agents.dqn_agent.memory method)": [[7, "rlcard.agents.dqn_agent.Memory.checkpoint_attributes"]], "checkpoint_attributes() (rlcard.agents.nfsp_agent.averagepolicynetwork method)": [[7, "rlcard.agents.nfsp_agent.AveragePolicyNetwork.checkpoint_attributes"]], "checkpoint_attributes() (rlcard.agents.nfsp_agent.nfspagent method)": [[7, "rlcard.agents.nfsp_agent.NFSPAgent.checkpoint_attributes"]], "checkpoint_attributes() (rlcard.agents.nfsp_agent.reservoirbuffer method)": [[7, "rlcard.agents.nfsp_agent.ReservoirBuffer.checkpoint_attributes"]], "clear() (rlcard.agents.nfsp_agent.reservoirbuffer method)": [[7, "rlcard.agents.nfsp_agent.ReservoirBuffer.clear"]], "close() (rlcard.agents.dmc_agent.file_writer.filewriter method)": [[7, "rlcard.agents.dmc_agent.file_writer.FileWriter.close"]], "compute_loss() (in module rlcard.agents.dmc_agent.trainer)": [[7, "rlcard.agents.dmc_agent.trainer.compute_loss"]], "create_buffers() (in module rlcard.agents.dmc_agent.utils)": [[7, "rlcard.agents.dmc_agent.utils.create_buffers"]], "create_buffers_pettingzoo() (in module rlcard.agents.dmc_agent.pettingzoo_utils)": [[7, "rlcard.agents.dmc_agent.pettingzoo_utils.create_buffers_pettingzoo"]], "create_optimizers() (in module rlcard.agents.dmc_agent.utils)": [[7, "rlcard.agents.dmc_agent.utils.create_optimizers"]], "done (rlcard.agents.dqn_agent.transition attribute)": [[7, "rlcard.agents.dqn_agent.Transition.done"]], "eval() (rlcard.agents.dmc_agent.model.dmcagent method)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent.eval"]], "eval() (rlcard.agents.dmc_agent.model.dmcmodel method)": [[7, "rlcard.agents.dmc_agent.model.DMCModel.eval"]], "eval() (rlcard.agents.dmc_agent.pettingzoo_model.dmcmodelpettingzoo method)": [[7, "rlcard.agents.dmc_agent.pettingzoo_model.DMCModelPettingZoo.eval"]], "eval_step() (rlcard.agents.cfr_agent.cfragent method)": [[7, "rlcard.agents.cfr_agent.CFRAgent.eval_step"]], "eval_step() (rlcard.agents.dmc_agent.model.dmcagent method)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent.eval_step"]], "eval_step() (rlcard.agents.dmc_agent.pettingzoo_model.dmcagentpettingzoo method)": [[7, "rlcard.agents.dmc_agent.pettingzoo_model.DMCAgentPettingZoo.eval_step"]], "eval_step() (rlcard.agents.dqn_agent.dqnagent method)": [[7, "rlcard.agents.dqn_agent.DQNAgent.eval_step"]], "eval_step() (rlcard.agents.human_agents.blackjack_human_agent.humanagent method)": [[7, "rlcard.agents.human_agents.blackjack_human_agent.HumanAgent.eval_step"]], "eval_step() (rlcard.agents.human_agents.leduc_holdem_human_agent.humanagent method)": [[7, "rlcard.agents.human_agents.leduc_holdem_human_agent.HumanAgent.eval_step"]], "eval_step() (rlcard.agents.human_agents.limit_holdem_human_agent.humanagent method)": [[7, "rlcard.agents.human_agents.limit_holdem_human_agent.HumanAgent.eval_step"]], "eval_step() (rlcard.agents.human_agents.nolimit_holdem_human_agent.humanagent method)": [[7, "rlcard.agents.human_agents.nolimit_holdem_human_agent.HumanAgent.eval_step"]], "eval_step() (rlcard.agents.human_agents.uno_human_agent.humanagent method)": [[7, "rlcard.agents.human_agents.uno_human_agent.HumanAgent.eval_step"]], "eval_step() (rlcard.agents.nfsp_agent.nfspagent method)": [[7, "rlcard.agents.nfsp_agent.NFSPAgent.eval_step"]], "eval_step() (rlcard.agents.pettingzoo_agents.dqnagentpettingzoo method)": [[7, "rlcard.agents.pettingzoo_agents.DQNAgentPettingZoo.eval_step"]], "eval_step() (rlcard.agents.pettingzoo_agents.nfspagentpettingzoo method)": [[7, "rlcard.agents.pettingzoo_agents.NFSPAgentPettingZoo.eval_step"]], "eval_step() (rlcard.agents.pettingzoo_agents.randomagentpettingzoo method)": [[7, "rlcard.agents.pettingzoo_agents.RandomAgentPettingZoo.eval_step"]], "eval_step() (rlcard.agents.random_agent.randomagent method)": [[7, "rlcard.agents.random_agent.RandomAgent.eval_step"]], "feed() (rlcard.agents.dmc_agent.pettingzoo_model.dmcagentpettingzoo method)": [[7, "rlcard.agents.dmc_agent.pettingzoo_model.DMCAgentPettingZoo.feed"]], "feed() (rlcard.agents.dqn_agent.dqnagent method)": [[7, "rlcard.agents.dqn_agent.DQNAgent.feed"]], "feed() (rlcard.agents.nfsp_agent.nfspagent method)": [[7, "rlcard.agents.nfsp_agent.NFSPAgent.feed"]], "feed() (rlcard.agents.pettingzoo_agents.dqnagentpettingzoo method)": [[7, "rlcard.agents.pettingzoo_agents.DQNAgentPettingZoo.feed"]], "feed() (rlcard.agents.pettingzoo_agents.nfspagentpettingzoo method)": [[7, "rlcard.agents.pettingzoo_agents.NFSPAgentPettingZoo.feed"]], "feed_memory() (rlcard.agents.dqn_agent.dqnagent method)": [[7, "rlcard.agents.dqn_agent.DQNAgent.feed_memory"]], "forward() (rlcard.agents.dmc_agent.model.dmcagent method)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent.forward"]], "forward() (rlcard.agents.dmc_agent.model.dmcnet method)": [[7, "rlcard.agents.dmc_agent.model.DMCNet.forward"]], "forward() (rlcard.agents.dqn_agent.estimatornetwork method)": [[7, "rlcard.agents.dqn_agent.EstimatorNetwork.forward"]], "forward() (rlcard.agents.nfsp_agent.averagepolicynetwork method)": [[7, "rlcard.agents.nfsp_agent.AveragePolicyNetwork.forward"]], "from_checkpoint() (rlcard.agents.dqn_agent.dqnagent class method)": [[7, "rlcard.agents.dqn_agent.DQNAgent.from_checkpoint"]], "from_checkpoint() (rlcard.agents.dqn_agent.estimator class method)": [[7, "rlcard.agents.dqn_agent.Estimator.from_checkpoint"]], "from_checkpoint() (rlcard.agents.dqn_agent.memory class method)": [[7, "rlcard.agents.dqn_agent.Memory.from_checkpoint"]], "from_checkpoint() (rlcard.agents.nfsp_agent.averagepolicynetwork class method)": [[7, "rlcard.agents.nfsp_agent.AveragePolicyNetwork.from_checkpoint"]], "from_checkpoint() (rlcard.agents.nfsp_agent.nfspagent class method)": [[7, "rlcard.agents.nfsp_agent.NFSPAgent.from_checkpoint"]], "from_checkpoint() (rlcard.agents.nfsp_agent.reservoirbuffer class method)": [[7, "rlcard.agents.nfsp_agent.ReservoirBuffer.from_checkpoint"]], "gather_metadata() (in module rlcard.agents.dmc_agent.file_writer)": [[7, "rlcard.agents.dmc_agent.file_writer.gather_metadata"]], "get_agent() (rlcard.agents.dmc_agent.model.dmcmodel method)": [[7, "rlcard.agents.dmc_agent.model.DMCModel.get_agent"]], "get_agent() (rlcard.agents.dmc_agent.pettingzoo_model.dmcmodelpettingzoo method)": [[7, "rlcard.agents.dmc_agent.pettingzoo_model.DMCModelPettingZoo.get_agent"]], "get_agents() (rlcard.agents.dmc_agent.model.dmcmodel method)": [[7, "rlcard.agents.dmc_agent.model.DMCModel.get_agents"]], "get_agents() (rlcard.agents.dmc_agent.pettingzoo_model.dmcmodelpettingzoo method)": [[7, "rlcard.agents.dmc_agent.pettingzoo_model.DMCModelPettingZoo.get_agents"]], "get_batch() (in module rlcard.agents.dmc_agent.utils)": [[7, "rlcard.agents.dmc_agent.utils.get_batch"]], "get_state() (rlcard.agents.cfr_agent.cfragent method)": [[7, "rlcard.agents.cfr_agent.CFRAgent.get_state"]], "info_state (rlcard.agents.nfsp_agent.transition attribute)": [[7, "rlcard.agents.nfsp_agent.Transition.info_state"]], "learn() (in module rlcard.agents.dmc_agent.trainer)": [[7, "rlcard.agents.dmc_agent.trainer.learn"]], "legal_actions (rlcard.agents.dqn_agent.transition attribute)": [[7, "rlcard.agents.dqn_agent.Transition.legal_actions"]], "load() (rlcard.agents.cfr_agent.cfragent method)": [[7, "rlcard.agents.cfr_agent.CFRAgent.load"]], "load_state_dict() (rlcard.agents.dmc_agent.model.dmcagent method)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent.load_state_dict"]], "log() (rlcard.agents.dmc_agent.file_writer.filewriter method)": [[7, "rlcard.agents.dmc_agent.file_writer.FileWriter.log"]], "module": [[7, "module-rlcard.agents.cfr_agent"], [7, "module-rlcard.agents.dmc_agent.file_writer"], [7, "module-rlcard.agents.dmc_agent.model"], [7, "module-rlcard.agents.dmc_agent.pettingzoo_model"], [7, "module-rlcard.agents.dmc_agent.pettingzoo_utils"], [7, "module-rlcard.agents.dmc_agent.trainer"], [7, "module-rlcard.agents.dmc_agent.utils"], [7, "module-rlcard.agents.dqn_agent"], [7, "module-rlcard.agents.human_agents.blackjack_human_agent"], [7, "module-rlcard.agents.human_agents.leduc_holdem_human_agent"], [7, "module-rlcard.agents.human_agents.limit_holdem_human_agent"], [7, "module-rlcard.agents.human_agents.nolimit_holdem_human_agent"], [7, "module-rlcard.agents.human_agents.uno_human_agent"], [7, "module-rlcard.agents.nfsp_agent"], [7, "module-rlcard.agents.pettingzoo_agents"], [7, "module-rlcard.agents.random_agent"], [8, "module-rlcard.envs.blackjack"], [8, "module-rlcard.envs.bridge"], [8, "module-rlcard.envs.doudizhu"], [8, "module-rlcard.envs.env"], [8, "module-rlcard.envs.gin_rummy"], [8, "module-rlcard.envs.leducholdem"], [8, "module-rlcard.envs.limitholdem"], [8, "module-rlcard.envs.mahjong"], [8, "module-rlcard.envs.nolimitholdem"], [8, "module-rlcard.envs.registration"], [8, "module-rlcard.envs.uno"], [10, "module-rlcard.games.blackjack.dealer"], [10, "module-rlcard.games.blackjack.game"], [10, "module-rlcard.games.blackjack.judger"], [10, "module-rlcard.games.blackjack.player"], [11, "module-rlcard.games.bridge.dealer"], [11, "module-rlcard.games.bridge.game"], [11, "module-rlcard.games.bridge.judger"], [11, "module-rlcard.games.bridge.player"], [11, "module-rlcard.games.bridge.round"], [12, "module-rlcard.games.doudizhu.dealer"], [12, "module-rlcard.games.doudizhu.game"], [12, "module-rlcard.games.doudizhu.judger"], [12, "module-rlcard.games.doudizhu.player"], [12, "module-rlcard.games.doudizhu.round"], [13, "module-rlcard.games.gin_rummy.dealer"], [13, "module-rlcard.games.gin_rummy.game"], [13, "module-rlcard.games.gin_rummy.judge"], [13, "module-rlcard.games.gin_rummy.player"], [13, "module-rlcard.games.gin_rummy.round"], [14, "module-rlcard.games.gin_rummy.utils.action_event"], [14, "module-rlcard.games.gin_rummy.utils.gin_rummy_error"], [14, "module-rlcard.games.gin_rummy.utils.melding"], [14, "module-rlcard.games.gin_rummy.utils.move"], [14, "module-rlcard.games.gin_rummy.utils.scorers"], [14, "module-rlcard.games.gin_rummy.utils.settings"], [14, "module-rlcard.games.gin_rummy.utils.thinker"], [14, "module-rlcard.games.gin_rummy.utils.utils"], [15, "module-rlcard.games.leducholdem.dealer"], [15, "module-rlcard.games.leducholdem.game"], [15, "module-rlcard.games.leducholdem.judger"], [15, "module-rlcard.games.leducholdem.player"], [15, "module-rlcard.games.leducholdem.round"], [16, "module-rlcard.games.limitholdem.dealer"], [16, "module-rlcard.games.limitholdem.game"], [16, "module-rlcard.games.limitholdem.judger"], [16, "module-rlcard.games.limitholdem.player"], [16, "module-rlcard.games.limitholdem.round"], [16, "module-rlcard.games.limitholdem.utils"], [17, "module-rlcard.games.mahjong.card"], [17, "module-rlcard.games.mahjong.dealer"], [17, "module-rlcard.games.mahjong.game"], [17, "module-rlcard.games.mahjong.judger"], [17, "module-rlcard.games.mahjong.player"], [17, "module-rlcard.games.mahjong.round"], [17, "module-rlcard.games.mahjong.utils"], [18, "module-rlcard.games.nolimitholdem.dealer"], [18, "module-rlcard.games.nolimitholdem.game"], [18, "module-rlcard.games.nolimitholdem.judger"], [18, "module-rlcard.games.nolimitholdem.player"], [18, "module-rlcard.games.nolimitholdem.round"], [19, "module-rlcard.games.uno.card"], [19, "module-rlcard.games.uno.dealer"], [19, "module-rlcard.games.uno.game"], [19, "module-rlcard.games.uno.judger"], [19, "module-rlcard.games.uno.player"], [19, "module-rlcard.games.uno.round"], [19, "module-rlcard.games.uno.utils"], [20, "module-rlcard.models.bridge_rule_models"], [20, "module-rlcard.models.doudizhu_rule_models"], [20, "module-rlcard.models.gin_rummy_rule_models"], [20, "module-rlcard.models.leducholdem_rule_models"], [20, "module-rlcard.models.limitholdem_rule_models"], [20, "module-rlcard.models.pretrained_models"], [20, "module-rlcard.models.registration"], [20, "module-rlcard.models.uno_rule_models"], [21, "module-rlcard.utils.logger"], [21, "module-rlcard.utils.pettingzoo_utils"], [21, "module-rlcard.utils.seeding"], [21, "module-rlcard.utils.utils"]], "next_state (rlcard.agents.dqn_agent.transition attribute)": [[7, "rlcard.agents.dqn_agent.Transition.next_state"]], "parameters() (rlcard.agents.dmc_agent.model.dmcagent method)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent.parameters"]], "parameters() (rlcard.agents.dmc_agent.model.dmcmodel method)": [[7, "rlcard.agents.dmc_agent.model.DMCModel.parameters"]], "parameters() (rlcard.agents.dmc_agent.pettingzoo_model.dmcmodelpettingzoo method)": [[7, "rlcard.agents.dmc_agent.pettingzoo_model.DMCModelPettingZoo.parameters"]], "predict() (rlcard.agents.dmc_agent.model.dmcagent method)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent.predict"]], "predict() (rlcard.agents.dqn_agent.dqnagent method)": [[7, "rlcard.agents.dqn_agent.DQNAgent.predict"]], "predict_nograd() (rlcard.agents.dqn_agent.estimator method)": [[7, "rlcard.agents.dqn_agent.Estimator.predict_nograd"]], "regret_matching() (rlcard.agents.cfr_agent.cfragent method)": [[7, "rlcard.agents.cfr_agent.CFRAgent.regret_matching"]], "reward (rlcard.agents.dqn_agent.transition attribute)": [[7, "rlcard.agents.dqn_agent.Transition.reward"]], "rlcard.agents.cfr_agent": [[7, "module-rlcard.agents.cfr_agent"]], "rlcard.agents.dmc_agent.file_writer": [[7, "module-rlcard.agents.dmc_agent.file_writer"]], "rlcard.agents.dmc_agent.model": [[7, "module-rlcard.agents.dmc_agent.model"]], "rlcard.agents.dmc_agent.pettingzoo_model": [[7, "module-rlcard.agents.dmc_agent.pettingzoo_model"]], "rlcard.agents.dmc_agent.pettingzoo_utils": [[7, "module-rlcard.agents.dmc_agent.pettingzoo_utils"]], "rlcard.agents.dmc_agent.trainer": [[7, "module-rlcard.agents.dmc_agent.trainer"]], "rlcard.agents.dmc_agent.utils": [[7, "module-rlcard.agents.dmc_agent.utils"]], "rlcard.agents.dqn_agent": [[7, "module-rlcard.agents.dqn_agent"]], "rlcard.agents.human_agents.blackjack_human_agent": [[7, "module-rlcard.agents.human_agents.blackjack_human_agent"]], "rlcard.agents.human_agents.leduc_holdem_human_agent": [[7, "module-rlcard.agents.human_agents.leduc_holdem_human_agent"]], "rlcard.agents.human_agents.limit_holdem_human_agent": [[7, "module-rlcard.agents.human_agents.limit_holdem_human_agent"]], "rlcard.agents.human_agents.nolimit_holdem_human_agent": [[7, "module-rlcard.agents.human_agents.nolimit_holdem_human_agent"]], "rlcard.agents.human_agents.uno_human_agent": [[7, "module-rlcard.agents.human_agents.uno_human_agent"]], "rlcard.agents.nfsp_agent": [[7, "module-rlcard.agents.nfsp_agent"]], "rlcard.agents.pettingzoo_agents": [[7, "module-rlcard.agents.pettingzoo_agents"]], "rlcard.agents.random_agent": [[7, "module-rlcard.agents.random_agent"]], "sample() (rlcard.agents.dqn_agent.memory method)": [[7, "rlcard.agents.dqn_agent.Memory.sample"]], "sample() (rlcard.agents.nfsp_agent.reservoirbuffer method)": [[7, "rlcard.agents.nfsp_agent.ReservoirBuffer.sample"]], "sample_episode_policy() (rlcard.agents.nfsp_agent.nfspagent method)": [[7, "rlcard.agents.nfsp_agent.NFSPAgent.sample_episode_policy"]], "save() (rlcard.agents.cfr_agent.cfragent method)": [[7, "rlcard.agents.cfr_agent.CFRAgent.save"]], "save() (rlcard.agents.dqn_agent.memory method)": [[7, "rlcard.agents.dqn_agent.Memory.save"]], "save_checkpoint() (rlcard.agents.dqn_agent.dqnagent method)": [[7, "rlcard.agents.dqn_agent.DQNAgent.save_checkpoint"]], "save_checkpoint() (rlcard.agents.nfsp_agent.nfspagent method)": [[7, "rlcard.agents.nfsp_agent.NFSPAgent.save_checkpoint"]], "set_device() (rlcard.agents.dmc_agent.model.dmcagent method)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent.set_device"]], "set_device() (rlcard.agents.dqn_agent.dqnagent method)": [[7, "rlcard.agents.dqn_agent.DQNAgent.set_device"]], "set_device() (rlcard.agents.nfsp_agent.nfspagent method)": [[7, "rlcard.agents.nfsp_agent.NFSPAgent.set_device"]], "share_memory() (rlcard.agents.dmc_agent.model.dmcagent method)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent.share_memory"]], "share_memory() (rlcard.agents.dmc_agent.model.dmcmodel method)": [[7, "rlcard.agents.dmc_agent.model.DMCModel.share_memory"]], "share_memory() (rlcard.agents.dmc_agent.pettingzoo_model.dmcmodelpettingzoo method)": [[7, "rlcard.agents.dmc_agent.pettingzoo_model.DMCModelPettingZoo.share_memory"]], "start() (rlcard.agents.dmc_agent.trainer.dmctrainer method)": [[7, "rlcard.agents.dmc_agent.trainer.DMCTrainer.start"]], "state (rlcard.agents.dqn_agent.transition attribute)": [[7, "rlcard.agents.dqn_agent.Transition.state"]], "state_dict() (rlcard.agents.dmc_agent.model.dmcagent method)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent.state_dict"]], "step() (rlcard.agents.dmc_agent.model.dmcagent method)": [[7, "rlcard.agents.dmc_agent.model.DMCAgent.step"]], "step() (rlcard.agents.dmc_agent.pettingzoo_model.dmcagentpettingzoo method)": [[7, "rlcard.agents.dmc_agent.pettingzoo_model.DMCAgentPettingZoo.step"]], "step() (rlcard.agents.dqn_agent.dqnagent method)": [[7, "rlcard.agents.dqn_agent.DQNAgent.step"]], "step() (rlcard.agents.human_agents.blackjack_human_agent.humanagent static method)": [[7, "rlcard.agents.human_agents.blackjack_human_agent.HumanAgent.step"]], "step() (rlcard.agents.human_agents.leduc_holdem_human_agent.humanagent static method)": [[7, "rlcard.agents.human_agents.leduc_holdem_human_agent.HumanAgent.step"]], "step() (rlcard.agents.human_agents.limit_holdem_human_agent.humanagent static method)": [[7, "rlcard.agents.human_agents.limit_holdem_human_agent.HumanAgent.step"]], "step() (rlcard.agents.human_agents.nolimit_holdem_human_agent.humanagent static method)": [[7, "rlcard.agents.human_agents.nolimit_holdem_human_agent.HumanAgent.step"]], "step() (rlcard.agents.human_agents.uno_human_agent.humanagent static method)": [[7, "rlcard.agents.human_agents.uno_human_agent.HumanAgent.step"]], "step() (rlcard.agents.nfsp_agent.nfspagent method)": [[7, "rlcard.agents.nfsp_agent.NFSPAgent.step"]], "step() (rlcard.agents.pettingzoo_agents.dqnagentpettingzoo method)": [[7, "rlcard.agents.pettingzoo_agents.DQNAgentPettingZoo.step"]], "step() (rlcard.agents.pettingzoo_agents.nfspagentpettingzoo method)": [[7, "rlcard.agents.pettingzoo_agents.NFSPAgentPettingZoo.step"]], "step() (rlcard.agents.pettingzoo_agents.randomagentpettingzoo method)": [[7, "rlcard.agents.pettingzoo_agents.RandomAgentPettingZoo.step"]], "step() (rlcard.agents.random_agent.randomagent static method)": [[7, "rlcard.agents.random_agent.RandomAgent.step"]], "train() (rlcard.agents.cfr_agent.cfragent method)": [[7, "rlcard.agents.cfr_agent.CFRAgent.train"]], "train() (rlcard.agents.dqn_agent.dqnagent method)": [[7, "rlcard.agents.dqn_agent.DQNAgent.train"]], "train_sl() (rlcard.agents.nfsp_agent.nfspagent method)": [[7, "rlcard.agents.nfsp_agent.NFSPAgent.train_sl"]], "traverse_tree() (rlcard.agents.cfr_agent.cfragent method)": [[7, "rlcard.agents.cfr_agent.CFRAgent.traverse_tree"]], "update() (rlcard.agents.dqn_agent.estimator method)": [[7, "rlcard.agents.dqn_agent.Estimator.update"]], "update_policy() (rlcard.agents.cfr_agent.cfragent method)": [[7, "rlcard.agents.cfr_agent.CFRAgent.update_policy"]], "blackjackenv (class in rlcard.envs.blackjack)": [[8, "rlcard.envs.blackjack.BlackjackEnv"]], "bridgeenv (class in rlcard.envs.bridge)": [[8, "rlcard.envs.bridge.BridgeEnv"]], "bridgepayoffdelegate (class in rlcard.envs.bridge)": [[8, "rlcard.envs.bridge.BridgePayoffDelegate"]], "bridgestateextractor (class in rlcard.envs.bridge)": [[8, "rlcard.envs.bridge.BridgeStateExtractor"]], "defaultbridgepayoffdelegate (class in rlcard.envs.bridge)": [[8, "rlcard.envs.bridge.DefaultBridgePayoffDelegate"]], "defaultbridgestateextractor (class in rlcard.envs.bridge)": [[8, "rlcard.envs.bridge.DefaultBridgeStateExtractor"]], "doudizhuenv (class in rlcard.envs.doudizhu)": [[8, "rlcard.envs.doudizhu.DoudizhuEnv"]], "env (class in rlcard.envs.env)": [[8, "rlcard.envs.env.Env"]], "envregistry (class in rlcard.envs.registration)": [[8, "rlcard.envs.registration.EnvRegistry"]], "envspec (class in rlcard.envs.registration)": [[8, "rlcard.envs.registration.EnvSpec"]], "ginrummyenv (class in rlcard.envs.gin_rummy)": [[8, "rlcard.envs.gin_rummy.GinRummyEnv"]], "leducholdemenv (class in rlcard.envs.leducholdem)": [[8, "rlcard.envs.leducholdem.LeducholdemEnv"]], "limitholdemenv (class in rlcard.envs.limitholdem)": [[8, "rlcard.envs.limitholdem.LimitholdemEnv"]], "mahjongenv (class in rlcard.envs.mahjong)": [[8, "rlcard.envs.mahjong.MahjongEnv"]], "nolimitholdemenv (class in rlcard.envs.nolimitholdem)": [[8, "rlcard.envs.nolimitholdem.NolimitholdemEnv"]], "unoenv (class in rlcard.envs.uno)": [[8, "rlcard.envs.uno.UnoEnv"]], "extract_state() (rlcard.envs.bridge.bridgestateextractor method)": [[8, "rlcard.envs.bridge.BridgeStateExtractor.extract_state"]], "extract_state() (rlcard.envs.bridge.defaultbridgestateextractor method)": [[8, "rlcard.envs.bridge.DefaultBridgeStateExtractor.extract_state"]], "get_action_feature() (rlcard.envs.doudizhu.doudizhuenv method)": [[8, "rlcard.envs.doudizhu.DoudizhuEnv.get_action_feature"]], "get_action_feature() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.get_action_feature"]], "get_legal_actions() (rlcard.envs.bridge.bridgestateextractor static method)": [[8, "rlcard.envs.bridge.BridgeStateExtractor.get_legal_actions"]], "get_payoffs() (rlcard.envs.blackjack.blackjackenv method)": [[8, "rlcard.envs.blackjack.BlackjackEnv.get_payoffs"]], "get_payoffs() (rlcard.envs.bridge.bridgeenv method)": [[8, "rlcard.envs.bridge.BridgeEnv.get_payoffs"]], "get_payoffs() (rlcard.envs.bridge.bridgepayoffdelegate method)": [[8, "rlcard.envs.bridge.BridgePayoffDelegate.get_payoffs"]], "get_payoffs() (rlcard.envs.bridge.defaultbridgepayoffdelegate method)": [[8, "rlcard.envs.bridge.DefaultBridgePayoffDelegate.get_payoffs"]], "get_payoffs() (rlcard.envs.doudizhu.doudizhuenv method)": [[8, "rlcard.envs.doudizhu.DoudizhuEnv.get_payoffs"]], "get_payoffs() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.get_payoffs"]], "get_payoffs() (rlcard.envs.gin_rummy.ginrummyenv method)": [[8, "rlcard.envs.gin_rummy.GinRummyEnv.get_payoffs"]], "get_payoffs() (rlcard.envs.leducholdem.leducholdemenv method)": [[8, "rlcard.envs.leducholdem.LeducholdemEnv.get_payoffs"]], "get_payoffs() (rlcard.envs.limitholdem.limitholdemenv method)": [[8, "rlcard.envs.limitholdem.LimitholdemEnv.get_payoffs"]], "get_payoffs() (rlcard.envs.mahjong.mahjongenv method)": [[8, "rlcard.envs.mahjong.MahjongEnv.get_payoffs"]], "get_payoffs() (rlcard.envs.nolimitholdem.nolimitholdemenv method)": [[8, "rlcard.envs.nolimitholdem.NolimitholdemEnv.get_payoffs"]], "get_payoffs() (rlcard.envs.uno.unoenv method)": [[8, "rlcard.envs.uno.UnoEnv.get_payoffs"]], "get_perfect_information() (rlcard.envs.bridge.bridgeenv method)": [[8, "rlcard.envs.bridge.BridgeEnv.get_perfect_information"]], "get_perfect_information() (rlcard.envs.doudizhu.doudizhuenv method)": [[8, "rlcard.envs.doudizhu.DoudizhuEnv.get_perfect_information"]], "get_perfect_information() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.get_perfect_information"]], "get_perfect_information() (rlcard.envs.leducholdem.leducholdemenv method)": [[8, "rlcard.envs.leducholdem.LeducholdemEnv.get_perfect_information"]], "get_perfect_information() (rlcard.envs.limitholdem.limitholdemenv method)": [[8, "rlcard.envs.limitholdem.LimitholdemEnv.get_perfect_information"]], "get_perfect_information() (rlcard.envs.nolimitholdem.nolimitholdemenv method)": [[8, "rlcard.envs.nolimitholdem.NolimitholdemEnv.get_perfect_information"]], "get_perfect_information() (rlcard.envs.uno.unoenv method)": [[8, "rlcard.envs.uno.UnoEnv.get_perfect_information"]], "get_player_id() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.get_player_id"]], "get_score() (in module rlcard.envs.blackjack)": [[8, "rlcard.envs.blackjack.get_score"]], "get_state() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.get_state"]], "get_state_shape_size() (rlcard.envs.bridge.bridgestateextractor method)": [[8, "rlcard.envs.bridge.BridgeStateExtractor.get_state_shape_size"]], "get_state_shape_size() (rlcard.envs.bridge.defaultbridgestateextractor method)": [[8, "rlcard.envs.bridge.DefaultBridgeStateExtractor.get_state_shape_size"]], "is_over() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.is_over"]], "make() (in module rlcard.envs.registration)": [[8, "rlcard.envs.registration.make"]], "make() (rlcard.envs.registration.envregistry method)": [[8, "rlcard.envs.registration.EnvRegistry.make"]], "make() (rlcard.envs.registration.envspec method)": [[8, "rlcard.envs.registration.EnvSpec.make"]], "register() (in module rlcard.envs.registration)": [[8, "rlcard.envs.registration.register"]], "register() (rlcard.envs.registration.envregistry method)": [[8, "rlcard.envs.registration.EnvRegistry.register"]], "reset() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.reset"]], "rlcard.envs.blackjack": [[8, "module-rlcard.envs.blackjack"]], "rlcard.envs.bridge": [[8, "module-rlcard.envs.bridge"]], "rlcard.envs.doudizhu": [[8, "module-rlcard.envs.doudizhu"]], "rlcard.envs.env": [[8, "module-rlcard.envs.env"]], "rlcard.envs.gin_rummy": [[8, "module-rlcard.envs.gin_rummy"]], "rlcard.envs.leducholdem": [[8, "module-rlcard.envs.leducholdem"]], "rlcard.envs.limitholdem": [[8, "module-rlcard.envs.limitholdem"]], "rlcard.envs.mahjong": [[8, "module-rlcard.envs.mahjong"]], "rlcard.envs.nolimitholdem": [[8, "module-rlcard.envs.nolimitholdem"]], "rlcard.envs.registration": [[8, "module-rlcard.envs.registration"]], "rlcard.envs.uno": [[8, "module-rlcard.envs.uno"]], "run() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.run"]], "seed() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.seed"]], "set_agents() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.set_agents"]], "step() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.step"]], "step_back() (rlcard.envs.env.env method)": [[8, "rlcard.envs.env.Env.step_back"]], "blackjackdealer (class in rlcard.games.blackjack.dealer)": [[10, "rlcard.games.blackjack.dealer.BlackjackDealer"]], "blackjackgame (class in rlcard.games.blackjack.game)": [[10, "rlcard.games.blackjack.game.BlackjackGame"]], "blackjackjudger (class in rlcard.games.blackjack.judger)": [[10, "rlcard.games.blackjack.judger.BlackjackJudger"]], "blackjackplayer (class in rlcard.games.blackjack.player)": [[10, "rlcard.games.blackjack.player.BlackjackPlayer"]], "configure() (rlcard.games.blackjack.game.blackjackgame method)": [[10, "rlcard.games.blackjack.game.BlackjackGame.configure"]], "deal_card() (rlcard.games.blackjack.dealer.blackjackdealer method)": [[10, "rlcard.games.blackjack.dealer.BlackjackDealer.deal_card"]], "get_num_actions() (rlcard.games.blackjack.game.blackjackgame static method)": [[10, "rlcard.games.blackjack.game.BlackjackGame.get_num_actions"]], "get_num_players() (rlcard.games.blackjack.game.blackjackgame method)": [[10, "rlcard.games.blackjack.game.BlackjackGame.get_num_players"]], "get_player_id() (rlcard.games.blackjack.game.blackjackgame method)": [[10, "rlcard.games.blackjack.game.BlackjackGame.get_player_id"]], "get_player_id() (rlcard.games.blackjack.player.blackjackplayer method)": [[10, "rlcard.games.blackjack.player.BlackjackPlayer.get_player_id"]], "get_state() (rlcard.games.blackjack.game.blackjackgame method)": [[10, "rlcard.games.blackjack.game.BlackjackGame.get_state"]], "init_game() (rlcard.games.blackjack.game.blackjackgame method)": [[10, "rlcard.games.blackjack.game.BlackjackGame.init_game"]], "is_over() (rlcard.games.blackjack.game.blackjackgame method)": [[10, "rlcard.games.blackjack.game.BlackjackGame.is_over"]], "judge_game() (rlcard.games.blackjack.judger.blackjackjudger method)": [[10, "rlcard.games.blackjack.judger.BlackjackJudger.judge_game"]], "judge_round() (rlcard.games.blackjack.judger.blackjackjudger method)": [[10, "rlcard.games.blackjack.judger.BlackjackJudger.judge_round"]], "judge_score() (rlcard.games.blackjack.judger.blackjackjudger method)": [[10, "rlcard.games.blackjack.judger.BlackjackJudger.judge_score"]], "rlcard.games.blackjack.dealer": [[10, "module-rlcard.games.blackjack.dealer"]], "rlcard.games.blackjack.game": [[10, "module-rlcard.games.blackjack.game"]], "rlcard.games.blackjack.judger": [[10, "module-rlcard.games.blackjack.judger"]], "rlcard.games.blackjack.player": [[10, "module-rlcard.games.blackjack.player"]], "shuffle() (rlcard.games.blackjack.dealer.blackjackdealer method)": [[10, "rlcard.games.blackjack.dealer.BlackjackDealer.shuffle"]], "step() (rlcard.games.blackjack.game.blackjackgame method)": [[10, "rlcard.games.blackjack.game.BlackjackGame.step"]], "step_back() (rlcard.games.blackjack.game.blackjackgame method)": [[10, "rlcard.games.blackjack.game.BlackjackGame.step_back"]], "bridgedealer (class in rlcard.games.bridge.dealer)": [[11, "rlcard.games.bridge.dealer.BridgeDealer"]], "bridgegame (class in rlcard.games.bridge.game)": [[11, "rlcard.games.bridge.game.BridgeGame"]], "bridgejudger (class in rlcard.games.bridge.judger)": [[11, "rlcard.games.bridge.judger.BridgeJudger"]], "bridgeplayer (class in rlcard.games.bridge.player)": [[11, "rlcard.games.bridge.player.BridgePlayer"]], "bridgeround (class in rlcard.games.bridge.round)": [[11, "rlcard.games.bridge.round.BridgeRound"]], "board_id (rlcard.games.bridge.round.bridgeround property)": [[11, "rlcard.games.bridge.round.BridgeRound.board_id"]], "deal_cards() (rlcard.games.bridge.dealer.bridgedealer method)": [[11, "rlcard.games.bridge.dealer.BridgeDealer.deal_cards"]], "dealer_id (rlcard.games.bridge.round.bridgeround property)": [[11, "rlcard.games.bridge.round.BridgeRound.dealer_id"]], "get_current_player() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.get_current_player"]], "get_declarer() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.get_declarer"]], "get_dummy() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.get_dummy"]], "get_left_defender() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.get_left_defender"]], "get_legal_actions() (rlcard.games.bridge.judger.bridgejudger method)": [[11, "rlcard.games.bridge.judger.BridgeJudger.get_legal_actions"]], "get_num_actions() (rlcard.games.bridge.game.bridgegame static method)": [[11, "rlcard.games.bridge.game.BridgeGame.get_num_actions"]], "get_num_players() (rlcard.games.bridge.game.bridgegame method)": [[11, "rlcard.games.bridge.game.BridgeGame.get_num_players"]], "get_perfect_information() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.get_perfect_information"]], "get_player_id() (rlcard.games.bridge.game.bridgegame method)": [[11, "rlcard.games.bridge.game.BridgeGame.get_player_id"]], "get_right_defender() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.get_right_defender"]], "get_state() (rlcard.games.bridge.game.bridgegame method)": [[11, "rlcard.games.bridge.game.BridgeGame.get_state"]], "get_trick_moves() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.get_trick_moves"]], "get_trump_suit() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.get_trump_suit"]], "init_game() (rlcard.games.bridge.game.bridgegame method)": [[11, "rlcard.games.bridge.game.BridgeGame.init_game"]], "is_bidding_over() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.is_bidding_over"]], "is_over() (rlcard.games.bridge.game.bridgegame method)": [[11, "rlcard.games.bridge.game.BridgeGame.is_over"]], "is_over() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.is_over"]], "make_call() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.make_call"]], "play_card() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.play_card"]], "print_scene() (rlcard.games.bridge.round.bridgeround method)": [[11, "rlcard.games.bridge.round.BridgeRound.print_scene"]], "remove_card_from_hand() (rlcard.games.bridge.player.bridgeplayer method)": [[11, "rlcard.games.bridge.player.BridgePlayer.remove_card_from_hand"]], "rlcard.games.bridge.dealer": [[11, "module-rlcard.games.bridge.dealer"]], "rlcard.games.bridge.game": [[11, "module-rlcard.games.bridge.game"]], "rlcard.games.bridge.judger": [[11, "module-rlcard.games.bridge.judger"]], "rlcard.games.bridge.player": [[11, "module-rlcard.games.bridge.player"]], "rlcard.games.bridge.round": [[11, "module-rlcard.games.bridge.round"]], "round_phase (rlcard.games.bridge.round.bridgeround property)": [[11, "rlcard.games.bridge.round.BridgeRound.round_phase"]], "step() (rlcard.games.bridge.game.bridgegame method)": [[11, "rlcard.games.bridge.game.BridgeGame.step"]], "vul (rlcard.games.bridge.round.bridgeround property)": [[11, "rlcard.games.bridge.round.BridgeRound.vul"]], "doudizhudealer (class in rlcard.games.doudizhu.dealer)": [[12, "rlcard.games.doudizhu.dealer.DoudizhuDealer"]], "doudizhugame (class in rlcard.games.doudizhu.game)": [[12, "rlcard.games.doudizhu.game.DoudizhuGame"]], "doudizhujudger (class in rlcard.games.doudizhu.judger)": [[12, "rlcard.games.doudizhu.judger.DoudizhuJudger"]], "doudizhuplayer (class in rlcard.games.doudizhu.player)": [[12, "rlcard.games.doudizhu.player.DoudizhuPlayer"]], "doudizhuround (class in rlcard.games.doudizhu.round)": [[12, "rlcard.games.doudizhu.round.DoudizhuRound"]], "available_actions() (rlcard.games.doudizhu.player.doudizhuplayer method)": [[12, "rlcard.games.doudizhu.player.DoudizhuPlayer.available_actions"]], "calc_playable_cards() (rlcard.games.doudizhu.judger.doudizhujudger method)": [[12, "rlcard.games.doudizhu.judger.DoudizhuJudger.calc_playable_cards"]], "cards_ndarray_to_str() (rlcard.games.doudizhu.round.doudizhuround static method)": [[12, "rlcard.games.doudizhu.round.DoudizhuRound.cards_ndarray_to_str"]], "chain_indexes() (rlcard.games.doudizhu.judger.doudizhujudger static method)": [[12, "rlcard.games.doudizhu.judger.DoudizhuJudger.chain_indexes"]], "current_hand (rlcard.games.doudizhu.player.doudizhuplayer property)": [[12, "rlcard.games.doudizhu.player.DoudizhuPlayer.current_hand"]], "deal_cards() (rlcard.games.doudizhu.dealer.doudizhudealer method)": [[12, "rlcard.games.doudizhu.dealer.DoudizhuDealer.deal_cards"]], "determine_role() (rlcard.games.doudizhu.dealer.doudizhudealer method)": [[12, "rlcard.games.doudizhu.dealer.DoudizhuDealer.determine_role"]], "find_last_greater_player_id_in_trace() (rlcard.games.doudizhu.round.doudizhuround method)": [[12, "rlcard.games.doudizhu.round.DoudizhuRound.find_last_greater_player_id_in_trace"]], "find_last_played_cards_in_trace() (rlcard.games.doudizhu.round.doudizhuround method)": [[12, "rlcard.games.doudizhu.round.DoudizhuRound.find_last_played_cards_in_trace"]], "get_num_actions() (rlcard.games.doudizhu.game.doudizhugame static method)": [[12, "rlcard.games.doudizhu.game.DoudizhuGame.get_num_actions"]], "get_num_players() (rlcard.games.doudizhu.game.doudizhugame method)": [[12, "rlcard.games.doudizhu.game.DoudizhuGame.get_num_players"]], "get_playable_cards() (rlcard.games.doudizhu.judger.doudizhujudger method)": [[12, "rlcard.games.doudizhu.judger.DoudizhuJudger.get_playable_cards"]], "get_player_id() (rlcard.games.doudizhu.game.doudizhugame method)": [[12, "rlcard.games.doudizhu.game.DoudizhuGame.get_player_id"]], "get_state() (rlcard.games.doudizhu.game.doudizhugame method)": [[12, "rlcard.games.doudizhu.game.DoudizhuGame.get_state"]], "get_state() (rlcard.games.doudizhu.player.doudizhuplayer method)": [[12, "rlcard.games.doudizhu.player.DoudizhuPlayer.get_state"]], "init_game() (rlcard.games.doudizhu.game.doudizhugame method)": [[12, "rlcard.games.doudizhu.game.DoudizhuGame.init_game"]], "initiate() (rlcard.games.doudizhu.round.doudizhuround method)": [[12, "rlcard.games.doudizhu.round.DoudizhuRound.initiate"]], "is_over() (rlcard.games.doudizhu.game.doudizhugame method)": [[12, "rlcard.games.doudizhu.game.DoudizhuGame.is_over"]], "judge_game() (rlcard.games.doudizhu.judger.doudizhujudger static method)": [[12, "rlcard.games.doudizhu.judger.DoudizhuJudger.judge_game"]], "judge_payoffs() (rlcard.games.doudizhu.judger.doudizhujudger static method)": [[12, "rlcard.games.doudizhu.judger.DoudizhuJudger.judge_payoffs"]], "pair_attachments() (rlcard.games.doudizhu.judger.doudizhujudger class method)": [[12, "rlcard.games.doudizhu.judger.DoudizhuJudger.pair_attachments"]], "play() (rlcard.games.doudizhu.player.doudizhuplayer method)": [[12, "rlcard.games.doudizhu.player.DoudizhuPlayer.play"]], "play_back() (rlcard.games.doudizhu.player.doudizhuplayer method)": [[12, "rlcard.games.doudizhu.player.DoudizhuPlayer.play_back"]], "playable_cards_from_hand() (rlcard.games.doudizhu.judger.doudizhujudger static method)": [[12, "rlcard.games.doudizhu.judger.DoudizhuJudger.playable_cards_from_hand"]], "proceed_round() (rlcard.games.doudizhu.round.doudizhuround method)": [[12, "rlcard.games.doudizhu.round.DoudizhuRound.proceed_round"]], "restore_playable_cards() (rlcard.games.doudizhu.judger.doudizhujudger method)": [[12, "rlcard.games.doudizhu.judger.DoudizhuJudger.restore_playable_cards"]], "rlcard.games.doudizhu.dealer": [[12, "module-rlcard.games.doudizhu.dealer"]], "rlcard.games.doudizhu.game": [[12, "module-rlcard.games.doudizhu.game"]], "rlcard.games.doudizhu.judger": [[12, "module-rlcard.games.doudizhu.judger"]], "rlcard.games.doudizhu.player": [[12, "module-rlcard.games.doudizhu.player"]], "rlcard.games.doudizhu.round": [[12, "module-rlcard.games.doudizhu.round"]], "set_current_hand() (rlcard.games.doudizhu.player.doudizhuplayer method)": [[12, "rlcard.games.doudizhu.player.DoudizhuPlayer.set_current_hand"]], "shuffle() (rlcard.games.doudizhu.dealer.doudizhudealer method)": [[12, "rlcard.games.doudizhu.dealer.DoudizhuDealer.shuffle"]], "solo_attachments() (rlcard.games.doudizhu.judger.doudizhujudger class method)": [[12, "rlcard.games.doudizhu.judger.DoudizhuJudger.solo_attachments"]], "step() (rlcard.games.doudizhu.game.doudizhugame method)": [[12, "rlcard.games.doudizhu.game.DoudizhuGame.step"]], "step_back() (rlcard.games.doudizhu.game.doudizhugame method)": [[12, "rlcard.games.doudizhu.game.DoudizhuGame.step_back"]], "step_back() (rlcard.games.doudizhu.round.doudizhuround method)": [[12, "rlcard.games.doudizhu.round.DoudizhuRound.step_back"]], "update_public() (rlcard.games.doudizhu.round.doudizhuround method)": [[12, "rlcard.games.doudizhu.round.DoudizhuRound.update_public"]], "ginrummydealer (class in rlcard.games.gin_rummy.dealer)": [[13, "rlcard.games.gin_rummy.dealer.GinRummyDealer"]], "ginrummygame (class in rlcard.games.gin_rummy.game)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame"]], "ginrummyjudge (class in rlcard.games.gin_rummy.judge)": [[13, "rlcard.games.gin_rummy.judge.GinRummyJudge"]], "ginrummyplayer (class in rlcard.games.gin_rummy.player)": [[13, "rlcard.games.gin_rummy.player.GinRummyPlayer"]], "ginrummyround (class in rlcard.games.gin_rummy.round)": [[13, "rlcard.games.gin_rummy.round.GinRummyRound"]], "add_card_to_hand() (rlcard.games.gin_rummy.player.ginrummyplayer method)": [[13, "rlcard.games.gin_rummy.player.GinRummyPlayer.add_card_to_hand"]], "deal_cards() (rlcard.games.gin_rummy.dealer.ginrummydealer method)": [[13, "rlcard.games.gin_rummy.dealer.GinRummyDealer.deal_cards"]], "declare_dead_hand() (rlcard.games.gin_rummy.round.ginrummyround method)": [[13, "rlcard.games.gin_rummy.round.GinRummyRound.declare_dead_hand"]], "decode_action() (rlcard.games.gin_rummy.game.ginrummygame static method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.decode_action"]], "did_populate_hand() (rlcard.games.gin_rummy.player.ginrummyplayer method)": [[13, "rlcard.games.gin_rummy.player.GinRummyPlayer.did_populate_hand"]], "discard() (rlcard.games.gin_rummy.round.ginrummyround method)": [[13, "rlcard.games.gin_rummy.round.GinRummyRound.discard"]], "draw_card() (rlcard.games.gin_rummy.round.ginrummyround method)": [[13, "rlcard.games.gin_rummy.round.GinRummyRound.draw_card"]], "get_current_player() (rlcard.games.gin_rummy.game.ginrummygame method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.get_current_player"]], "get_current_player() (rlcard.games.gin_rummy.round.ginrummyround method)": [[13, "rlcard.games.gin_rummy.round.GinRummyRound.get_current_player"]], "get_going_out_cards() (in module rlcard.games.gin_rummy.judge)": [[13, "rlcard.games.gin_rummy.judge.get_going_out_cards"]], "get_last_action() (rlcard.games.gin_rummy.game.ginrummygame method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.get_last_action"]], "get_legal_actions() (rlcard.games.gin_rummy.judge.ginrummyjudge method)": [[13, "rlcard.games.gin_rummy.judge.GinRummyJudge.get_legal_actions"]], "get_meld_clusters() (rlcard.games.gin_rummy.player.ginrummyplayer method)": [[13, "rlcard.games.gin_rummy.player.GinRummyPlayer.get_meld_clusters"]], "get_num_actions() (rlcard.games.gin_rummy.game.ginrummygame method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.get_num_actions"]], "get_num_players() (rlcard.games.gin_rummy.game.ginrummygame method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.get_num_players"]], "get_player_id() (rlcard.games.gin_rummy.game.ginrummygame method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.get_player_id"]], "get_player_id() (rlcard.games.gin_rummy.player.ginrummyplayer method)": [[13, "rlcard.games.gin_rummy.player.GinRummyPlayer.get_player_id"]], "get_state() (rlcard.games.gin_rummy.game.ginrummygame method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.get_state"]], "gin() (rlcard.games.gin_rummy.round.ginrummyround method)": [[13, "rlcard.games.gin_rummy.round.GinRummyRound.gin"]], "init_game() (rlcard.games.gin_rummy.game.ginrummygame method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.init_game"]], "is_over() (rlcard.games.gin_rummy.game.ginrummygame method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.is_over"]], "knock() (rlcard.games.gin_rummy.round.ginrummyround method)": [[13, "rlcard.games.gin_rummy.round.GinRummyRound.knock"]], "opponent_id_of() (rlcard.games.gin_rummy.player.ginrummyplayer static method)": [[13, "rlcard.games.gin_rummy.player.GinRummyPlayer.opponent_id_of"]], "pick_up_discard() (rlcard.games.gin_rummy.round.ginrummyround method)": [[13, "rlcard.games.gin_rummy.round.GinRummyRound.pick_up_discard"]], "remove_card_from_hand() (rlcard.games.gin_rummy.player.ginrummyplayer method)": [[13, "rlcard.games.gin_rummy.player.GinRummyPlayer.remove_card_from_hand"]], "rlcard.games.gin_rummy.dealer": [[13, "module-rlcard.games.gin_rummy.dealer"]], "rlcard.games.gin_rummy.game": [[13, "module-rlcard.games.gin_rummy.game"]], "rlcard.games.gin_rummy.judge": [[13, "module-rlcard.games.gin_rummy.judge"]], "rlcard.games.gin_rummy.player": [[13, "module-rlcard.games.gin_rummy.player"]], "rlcard.games.gin_rummy.round": [[13, "module-rlcard.games.gin_rummy.round"]], "score_player_0() (rlcard.games.gin_rummy.round.ginrummyround method)": [[13, "rlcard.games.gin_rummy.round.GinRummyRound.score_player_0"]], "score_player_1() (rlcard.games.gin_rummy.round.ginrummyround method)": [[13, "rlcard.games.gin_rummy.round.GinRummyRound.score_player_1"]], "short_name_of() (rlcard.games.gin_rummy.player.ginrummyplayer static method)": [[13, "rlcard.games.gin_rummy.player.GinRummyPlayer.short_name_of"]], "step() (rlcard.games.gin_rummy.game.ginrummygame method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.step"]], "step_back() (rlcard.games.gin_rummy.game.ginrummygame method)": [[13, "rlcard.games.gin_rummy.game.GinRummyGame.step_back"]], "actionevent (class in rlcard.games.gin_rummy.utils.action_event)": [[14, "rlcard.games.gin_rummy.utils.action_event.ActionEvent"]], "dealhandmove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.DealHandMove"]], "dealerforround (class in rlcard.games.gin_rummy.utils.settings)": [[14, "rlcard.games.gin_rummy.utils.settings.DealerForRound"]], "declaredeadhandaction (class in rlcard.games.gin_rummy.utils.action_event)": [[14, "rlcard.games.gin_rummy.utils.action_event.DeclareDeadHandAction"]], "declaredeadhandmove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.DeclareDeadHandMove"]], "discardaction (class in rlcard.games.gin_rummy.utils.action_event)": [[14, "rlcard.games.gin_rummy.utils.action_event.DiscardAction"]], "discardmove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.DiscardMove"]], "drawcardaction (class in rlcard.games.gin_rummy.utils.action_event)": [[14, "rlcard.games.gin_rummy.utils.action_event.DrawCardAction"]], "drawcardmove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.DrawCardMove"]], "ginaction (class in rlcard.games.gin_rummy.utils.action_event)": [[14, "rlcard.games.gin_rummy.utils.action_event.GinAction"]], "ginmove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.GinMove"]], "ginrummyerror": [[14, "rlcard.games.gin_rummy.utils.gin_rummy_error.GinRummyError"]], "ginrummymove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.GinRummyMove"]], "ginrummyprogramerror": [[14, "rlcard.games.gin_rummy.utils.gin_rummy_error.GinRummyProgramError"]], "ginrummyscorer (class in rlcard.games.gin_rummy.utils.scorers)": [[14, "rlcard.games.gin_rummy.utils.scorers.GinRummyScorer"]], "knockaction (class in rlcard.games.gin_rummy.utils.action_event)": [[14, "rlcard.games.gin_rummy.utils.action_event.KnockAction"]], "knockmove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.KnockMove"]], "north (rlcard.games.gin_rummy.utils.settings.dealerforround attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.DealerForRound.North"]], "pickupdiscardaction (class in rlcard.games.gin_rummy.utils.action_event)": [[14, "rlcard.games.gin_rummy.utils.action_event.PickUpDiscardAction"]], "pickupdiscardmove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.PickupDiscardMove"]], "playermove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.PlayerMove"]], "random (rlcard.games.gin_rummy.utils.settings.dealerforround attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.DealerForRound.Random"]], "scorenorthmove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.ScoreNorthMove"]], "scorenorthplayeraction (class in rlcard.games.gin_rummy.utils.action_event)": [[14, "rlcard.games.gin_rummy.utils.action_event.ScoreNorthPlayerAction"]], "scoresouthmove (class in rlcard.games.gin_rummy.utils.move)": [[14, "rlcard.games.gin_rummy.utils.move.ScoreSouthMove"]], "scoresouthplayeraction (class in rlcard.games.gin_rummy.utils.action_event)": [[14, "rlcard.games.gin_rummy.utils.action_event.ScoreSouthPlayerAction"]], "setting (class in rlcard.games.gin_rummy.utils.settings)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting"]], "settings (class in rlcard.games.gin_rummy.utils.settings)": [[14, "rlcard.games.gin_rummy.utils.settings.Settings"]], "south (rlcard.games.gin_rummy.utils.settings.dealerforround attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.DealerForRound.South"]], "thinker (class in rlcard.games.gin_rummy.utils.thinker)": [[14, "rlcard.games.gin_rummy.utils.thinker.Thinker"]], "card_from_card_id() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.card_from_card_id"]], "card_from_text() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.card_from_text"]], "change_settings() (rlcard.games.gin_rummy.utils.settings.settings method)": [[14, "rlcard.games.gin_rummy.utils.settings.Settings.change_settings"]], "dealer_for_round (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.dealer_for_round"]], "decode_action() (rlcard.games.gin_rummy.utils.action_event.actionevent static method)": [[14, "rlcard.games.gin_rummy.utils.action_event.ActionEvent.decode_action"]], "decode_cards() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.decode_cards"]], "default_setting() (rlcard.games.gin_rummy.utils.settings.setting static method)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.default_setting"]], "encode_cards() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.encode_cards"]], "get_all_run_melds() (in module rlcard.games.gin_rummy.utils.melding)": [[14, "rlcard.games.gin_rummy.utils.melding.get_all_run_melds"]], "get_all_run_melds_for_suit() (in module rlcard.games.gin_rummy.utils.melding)": [[14, "rlcard.games.gin_rummy.utils.melding.get_all_run_melds_for_suit"]], "get_all_set_melds() (in module rlcard.games.gin_rummy.utils.melding)": [[14, "rlcard.games.gin_rummy.utils.melding.get_all_set_melds"]], "get_best_meld_clusters() (in module rlcard.games.gin_rummy.utils.melding)": [[14, "rlcard.games.gin_rummy.utils.melding.get_best_meld_clusters"]], "get_card() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.get_card"]], "get_card_id() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.get_card_id"]], "get_config_with_invalid_settings_set_to_default_value() (rlcard.games.gin_rummy.utils.settings.settings static method)": [[14, "rlcard.games.gin_rummy.utils.settings.Settings.get_config_with_invalid_settings_set_to_default_value"]], "get_deadwood() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.get_deadwood"]], "get_deadwood_count() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.get_deadwood_count"]], "get_deadwood_value() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.get_deadwood_value"]], "get_deck() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.get_deck"]], "get_meld_clusters() (in module rlcard.games.gin_rummy.utils.melding)": [[14, "rlcard.games.gin_rummy.utils.melding.get_meld_clusters"]], "get_meld_piles_with_discard_card() (rlcard.games.gin_rummy.utils.thinker.thinker method)": [[14, "rlcard.games.gin_rummy.utils.thinker.Thinker.get_meld_piles_with_discard_card"]], "get_num_actions() (rlcard.games.gin_rummy.utils.action_event.actionevent static method)": [[14, "rlcard.games.gin_rummy.utils.action_event.ActionEvent.get_num_actions"]], "get_payoff_gin_rummy_v0() (in module rlcard.games.gin_rummy.utils.scorers)": [[14, "rlcard.games.gin_rummy.utils.scorers.get_payoff_gin_rummy_v0"]], "get_payoff_gin_rummy_v1() (in module rlcard.games.gin_rummy.utils.scorers)": [[14, "rlcard.games.gin_rummy.utils.scorers.get_payoff_gin_rummy_v1"]], "get_payoffs() (rlcard.games.gin_rummy.utils.scorers.ginrummyscorer method)": [[14, "rlcard.games.gin_rummy.utils.scorers.GinRummyScorer.get_payoffs"]], "get_rank_id() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.get_rank_id"]], "get_suit_id() (in module rlcard.games.gin_rummy.utils.utils)": [[14, "rlcard.games.gin_rummy.utils.utils.get_suit_id"]], "going_out_deadwood_count (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.going_out_deadwood_count"]], "is_allowed_gin (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.is_allowed_gin"]], "is_allowed_knock (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.is_allowed_knock"]], "is_allowed_pick_up_discard (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.is_allowed_pick_up_discard"]], "is_allowed_to_discard_picked_up_card (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.is_allowed_to_discard_picked_up_card"]], "is_always_knock (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.is_always_knock"]], "is_south_never_knocks (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.is_south_never_knocks"]], "max_drawn_card_count (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.max_drawn_card_count"]], "max_move_count (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.max_move_count"]], "print_settings() (rlcard.games.gin_rummy.utils.settings.settings method)": [[14, "rlcard.games.gin_rummy.utils.settings.Settings.print_settings"]], "rlcard.games.gin_rummy.utils.action_event": [[14, "module-rlcard.games.gin_rummy.utils.action_event"]], "rlcard.games.gin_rummy.utils.gin_rummy_error": [[14, "module-rlcard.games.gin_rummy.utils.gin_rummy_error"]], "rlcard.games.gin_rummy.utils.melding": [[14, "module-rlcard.games.gin_rummy.utils.melding"]], "rlcard.games.gin_rummy.utils.move": [[14, "module-rlcard.games.gin_rummy.utils.move"]], "rlcard.games.gin_rummy.utils.scorers": [[14, "module-rlcard.games.gin_rummy.utils.scorers"]], "rlcard.games.gin_rummy.utils.settings": [[14, "module-rlcard.games.gin_rummy.utils.settings"]], "rlcard.games.gin_rummy.utils.thinker": [[14, "module-rlcard.games.gin_rummy.utils.thinker"]], "rlcard.games.gin_rummy.utils.utils": [[14, "module-rlcard.games.gin_rummy.utils.utils"]], "simple_gin_rummy_setting() (rlcard.games.gin_rummy.utils.settings.setting static method)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.simple_gin_rummy_setting"]], "stockpile_dead_card_count (rlcard.games.gin_rummy.utils.settings.setting attribute)": [[14, "rlcard.games.gin_rummy.utils.settings.Setting.stockpile_dead_card_count"]], "leducholdemdealer (class in rlcard.games.leducholdem.dealer)": [[15, "rlcard.games.leducholdem.dealer.LeducholdemDealer"]], "leducholdemgame (class in rlcard.games.leducholdem.game)": [[15, "rlcard.games.leducholdem.game.LeducholdemGame"]], "leducholdemjudger (class in rlcard.games.leducholdem.judger)": [[15, "rlcard.games.leducholdem.judger.LeducholdemJudger"]], "leducholdemplayer (class in rlcard.games.leducholdem.player)": [[15, "rlcard.games.leducholdem.player.LeducholdemPlayer"]], "leducholdemround (class in rlcard.games.leducholdem.round)": [[15, "rlcard.games.leducholdem.round.LeducholdemRound"]], "configure() (rlcard.games.leducholdem.game.leducholdemgame method)": [[15, "rlcard.games.leducholdem.game.LeducholdemGame.configure"]], "get_payoffs() (rlcard.games.leducholdem.game.leducholdemgame method)": [[15, "rlcard.games.leducholdem.game.LeducholdemGame.get_payoffs"]], "get_player_id() (rlcard.games.leducholdem.player.leducholdemplayer method)": [[15, "rlcard.games.leducholdem.player.LeducholdemPlayer.get_player_id"]], "get_state() (rlcard.games.leducholdem.game.leducholdemgame method)": [[15, "rlcard.games.leducholdem.game.LeducholdemGame.get_state"]], "get_state() (rlcard.games.leducholdem.player.leducholdemplayer method)": [[15, "rlcard.games.leducholdem.player.LeducholdemPlayer.get_state"]], "init_game() (rlcard.games.leducholdem.game.leducholdemgame method)": [[15, "rlcard.games.leducholdem.game.LeducholdemGame.init_game"]], "is_over() (rlcard.games.leducholdem.game.leducholdemgame method)": [[15, "rlcard.games.leducholdem.game.LeducholdemGame.is_over"]], "judge_game() (rlcard.games.leducholdem.judger.leducholdemjudger static method)": [[15, "rlcard.games.leducholdem.judger.LeducholdemJudger.judge_game"]], "np_random (rlcard.games.leducholdem.game.leducholdemgame attribute)": [[15, "rlcard.games.leducholdem.game.LeducholdemGame.np_random"]], "rlcard.games.leducholdem.dealer": [[15, "module-rlcard.games.leducholdem.dealer"]], "rlcard.games.leducholdem.game": [[15, "module-rlcard.games.leducholdem.game"]], "rlcard.games.leducholdem.judger": [[15, "module-rlcard.games.leducholdem.judger"]], "rlcard.games.leducholdem.player": [[15, "module-rlcard.games.leducholdem.player"]], "rlcard.games.leducholdem.round": [[15, "module-rlcard.games.leducholdem.round"]], "step() (rlcard.games.leducholdem.game.leducholdemgame method)": [[15, "rlcard.games.leducholdem.game.LeducholdemGame.step"]], "step_back() (rlcard.games.leducholdem.game.leducholdemgame method)": [[15, "rlcard.games.leducholdem.game.LeducholdemGame.step_back"]], "alive (rlcard.games.limitholdem.player.playerstatus attribute)": [[16, "rlcard.games.limitholdem.player.PlayerStatus.ALIVE"]], "allin (rlcard.games.limitholdem.player.playerstatus attribute)": [[16, "rlcard.games.limitholdem.player.PlayerStatus.ALLIN"]], "folded (rlcard.games.limitholdem.player.playerstatus attribute)": [[16, "rlcard.games.limitholdem.player.PlayerStatus.FOLDED"]], "hand (class in rlcard.games.limitholdem.utils)": [[16, "rlcard.games.limitholdem.utils.Hand"]], "limitholdemdealer (class in rlcard.games.limitholdem.dealer)": [[16, "rlcard.games.limitholdem.dealer.LimitHoldemDealer"]], "limitholdemgame (class in rlcard.games.limitholdem.game)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame"]], "limitholdemjudger (class in rlcard.games.limitholdem.judger)": [[16, "rlcard.games.limitholdem.judger.LimitHoldemJudger"]], "limitholdemplayer (class in rlcard.games.limitholdem.player)": [[16, "rlcard.games.limitholdem.player.LimitHoldemPlayer"]], "limitholdemround (class in rlcard.games.limitholdem.round)": [[16, "rlcard.games.limitholdem.round.LimitHoldemRound"]], "playerstatus (class in rlcard.games.limitholdem.player)": [[16, "rlcard.games.limitholdem.player.PlayerStatus"]], "compare_hands() (in module rlcard.games.limitholdem.utils)": [[16, "rlcard.games.limitholdem.utils.compare_hands"]], "compare_ranks() (in module rlcard.games.limitholdem.utils)": [[16, "rlcard.games.limitholdem.utils.compare_ranks"]], "configure() (rlcard.games.limitholdem.game.limitholdemgame method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.configure"]], "deal_card() (rlcard.games.limitholdem.dealer.limitholdemdealer method)": [[16, "rlcard.games.limitholdem.dealer.LimitHoldemDealer.deal_card"]], "determine_winner() (in module rlcard.games.limitholdem.utils)": [[16, "rlcard.games.limitholdem.utils.determine_winner"]], "determine_winner_four_of_a_kind() (in module rlcard.games.limitholdem.utils)": [[16, "rlcard.games.limitholdem.utils.determine_winner_four_of_a_kind"]], "determine_winner_straight() (in module rlcard.games.limitholdem.utils)": [[16, "rlcard.games.limitholdem.utils.determine_winner_straight"]], "evaluatehand() (rlcard.games.limitholdem.utils.hand method)": [[16, "rlcard.games.limitholdem.utils.Hand.evaluateHand"]], "final_compare() (in module rlcard.games.limitholdem.utils)": [[16, "rlcard.games.limitholdem.utils.final_compare"]], "get_hand_five_cards() (rlcard.games.limitholdem.utils.hand method)": [[16, "rlcard.games.limitholdem.utils.Hand.get_hand_five_cards"]], "get_legal_actions() (rlcard.games.limitholdem.game.limitholdemgame method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.get_legal_actions"]], "get_legal_actions() (rlcard.games.limitholdem.round.limitholdemround method)": [[16, "rlcard.games.limitholdem.round.LimitHoldemRound.get_legal_actions"]], "get_num_actions() (rlcard.games.limitholdem.game.limitholdemgame static method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.get_num_actions"]], "get_num_players() (rlcard.games.limitholdem.game.limitholdemgame method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.get_num_players"]], "get_payoffs() (rlcard.games.limitholdem.game.limitholdemgame method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.get_payoffs"]], "get_player_id() (rlcard.games.limitholdem.game.limitholdemgame method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.get_player_id"]], "get_player_id() (rlcard.games.limitholdem.player.limitholdemplayer method)": [[16, "rlcard.games.limitholdem.player.LimitHoldemPlayer.get_player_id"]], "get_state() (rlcard.games.limitholdem.game.limitholdemgame method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.get_state"]], "get_state() (rlcard.games.limitholdem.player.limitholdemplayer method)": [[16, "rlcard.games.limitholdem.player.LimitHoldemPlayer.get_state"]], "init_game() (rlcard.games.limitholdem.game.limitholdemgame method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.init_game"]], "is_over() (rlcard.games.limitholdem.game.limitholdemgame method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.is_over"]], "is_over() (rlcard.games.limitholdem.round.limitholdemround method)": [[16, "rlcard.games.limitholdem.round.LimitHoldemRound.is_over"]], "judge_game() (rlcard.games.limitholdem.judger.limitholdemjudger method)": [[16, "rlcard.games.limitholdem.judger.LimitHoldemJudger.judge_game"]], "proceed_round() (rlcard.games.limitholdem.round.limitholdemround method)": [[16, "rlcard.games.limitholdem.round.LimitHoldemRound.proceed_round"]], "rlcard.games.limitholdem.dealer": [[16, "module-rlcard.games.limitholdem.dealer"]], "rlcard.games.limitholdem.game": [[16, "module-rlcard.games.limitholdem.game"]], "rlcard.games.limitholdem.judger": [[16, "module-rlcard.games.limitholdem.judger"]], "rlcard.games.limitholdem.player": [[16, "module-rlcard.games.limitholdem.player"]], "rlcard.games.limitholdem.round": [[16, "module-rlcard.games.limitholdem.round"]], "rlcard.games.limitholdem.utils": [[16, "module-rlcard.games.limitholdem.utils"]], "shuffle() (rlcard.games.limitholdem.dealer.limitholdemdealer method)": [[16, "rlcard.games.limitholdem.dealer.LimitHoldemDealer.shuffle"]], "split_pot_among_players() (rlcard.games.limitholdem.judger.limitholdemjudger method)": [[16, "rlcard.games.limitholdem.judger.LimitHoldemJudger.split_pot_among_players"]], "split_pots_among_players() (rlcard.games.limitholdem.judger.limitholdemjudger method)": [[16, "rlcard.games.limitholdem.judger.LimitHoldemJudger.split_pots_among_players"]], "start_new_round() (rlcard.games.limitholdem.round.limitholdemround method)": [[16, "rlcard.games.limitholdem.round.LimitHoldemRound.start_new_round"]], "step() (rlcard.games.limitholdem.game.limitholdemgame method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.step"]], "step_back() (rlcard.games.limitholdem.game.limitholdemgame method)": [[16, "rlcard.games.limitholdem.game.LimitHoldemGame.step_back"]], "mahjongcard (class in rlcard.games.mahjong.card)": [[17, "rlcard.games.mahjong.card.MahjongCard"]], "mahjongdealer (class in rlcard.games.mahjong.dealer)": [[17, "rlcard.games.mahjong.dealer.MahjongDealer"]], "mahjonggame (class in rlcard.games.mahjong.game)": [[17, "rlcard.games.mahjong.game.MahjongGame"]], "mahjongjudger (class in rlcard.games.mahjong.judger)": [[17, "rlcard.games.mahjong.judger.MahjongJudger"]], "mahjongplayer (class in rlcard.games.mahjong.player)": [[17, "rlcard.games.mahjong.player.MahjongPlayer"]], "mahjonground (class in rlcard.games.mahjong.round)": [[17, "rlcard.games.mahjong.round.MahjongRound"]], "cal_set() (rlcard.games.mahjong.judger.mahjongjudger method)": [[17, "rlcard.games.mahjong.judger.MahjongJudger.cal_set"]], "cards2list() (in module rlcard.games.mahjong.utils)": [[17, "rlcard.games.mahjong.utils.cards2list"]], "check_consecutive() (rlcard.games.mahjong.judger.mahjongjudger static method)": [[17, "rlcard.games.mahjong.judger.MahjongJudger.check_consecutive"]], "chow() (rlcard.games.mahjong.player.mahjongplayer method)": [[17, "rlcard.games.mahjong.player.MahjongPlayer.chow"]], "deal_cards() (rlcard.games.mahjong.dealer.mahjongdealer method)": [[17, "rlcard.games.mahjong.dealer.MahjongDealer.deal_cards"]], "encode_cards() (in module rlcard.games.mahjong.utils)": [[17, "rlcard.games.mahjong.utils.encode_cards"]], "get_legal_actions() (rlcard.games.mahjong.game.mahjonggame static method)": [[17, "rlcard.games.mahjong.game.MahjongGame.get_legal_actions"]], "get_num_actions() (rlcard.games.mahjong.game.mahjonggame static method)": [[17, "rlcard.games.mahjong.game.MahjongGame.get_num_actions"]], "get_num_players() (rlcard.games.mahjong.game.mahjonggame method)": [[17, "rlcard.games.mahjong.game.MahjongGame.get_num_players"]], "get_player_id() (rlcard.games.mahjong.game.mahjonggame method)": [[17, "rlcard.games.mahjong.game.MahjongGame.get_player_id"]], "get_player_id() (rlcard.games.mahjong.player.mahjongplayer method)": [[17, "rlcard.games.mahjong.player.MahjongPlayer.get_player_id"]], "get_state() (rlcard.games.mahjong.game.mahjonggame method)": [[17, "rlcard.games.mahjong.game.MahjongGame.get_state"]], "get_state() (rlcard.games.mahjong.round.mahjonground method)": [[17, "rlcard.games.mahjong.round.MahjongRound.get_state"]], "get_str() (rlcard.games.mahjong.card.mahjongcard method)": [[17, "rlcard.games.mahjong.card.MahjongCard.get_str"]], "gong() (rlcard.games.mahjong.player.mahjongplayer method)": [[17, "rlcard.games.mahjong.player.MahjongPlayer.gong"]], "info (rlcard.games.mahjong.card.mahjongcard attribute)": [[17, "rlcard.games.mahjong.card.MahjongCard.info"]], "init_deck() (in module rlcard.games.mahjong.utils)": [[17, "rlcard.games.mahjong.utils.init_deck"]], "init_game() (rlcard.games.mahjong.game.mahjonggame method)": [[17, "rlcard.games.mahjong.game.MahjongGame.init_game"]], "is_over() (rlcard.games.mahjong.game.mahjonggame method)": [[17, "rlcard.games.mahjong.game.MahjongGame.is_over"]], "judge_chow() (rlcard.games.mahjong.judger.mahjongjudger method)": [[17, "rlcard.games.mahjong.judger.MahjongJudger.judge_chow"]], "judge_game() (rlcard.games.mahjong.judger.mahjongjudger method)": [[17, "rlcard.games.mahjong.judger.MahjongJudger.judge_game"]], "judge_hu() (rlcard.games.mahjong.judger.mahjongjudger method)": [[17, "rlcard.games.mahjong.judger.MahjongJudger.judge_hu"]], "judge_pong_gong() (rlcard.games.mahjong.judger.mahjongjudger static method)": [[17, "rlcard.games.mahjong.judger.MahjongJudger.judge_pong_gong"]], "pile2list() (in module rlcard.games.mahjong.utils)": [[17, "rlcard.games.mahjong.utils.pile2list"]], "play_card() (rlcard.games.mahjong.player.mahjongplayer method)": [[17, "rlcard.games.mahjong.player.MahjongPlayer.play_card"]], "pong() (rlcard.games.mahjong.player.mahjongplayer method)": [[17, "rlcard.games.mahjong.player.MahjongPlayer.pong"]], "print_hand() (rlcard.games.mahjong.player.mahjongplayer method)": [[17, "rlcard.games.mahjong.player.MahjongPlayer.print_hand"]], "print_pile() (rlcard.games.mahjong.player.mahjongplayer method)": [[17, "rlcard.games.mahjong.player.MahjongPlayer.print_pile"]], "proceed_round() (rlcard.games.mahjong.round.mahjonground method)": [[17, "rlcard.games.mahjong.round.MahjongRound.proceed_round"]], "rlcard.games.mahjong.card": [[17, "module-rlcard.games.mahjong.card"]], "rlcard.games.mahjong.dealer": [[17, "module-rlcard.games.mahjong.dealer"]], "rlcard.games.mahjong.game": [[17, "module-rlcard.games.mahjong.game"]], "rlcard.games.mahjong.judger": [[17, "module-rlcard.games.mahjong.judger"]], "rlcard.games.mahjong.player": [[17, "module-rlcard.games.mahjong.player"]], "rlcard.games.mahjong.round": [[17, "module-rlcard.games.mahjong.round"]], "rlcard.games.mahjong.utils": [[17, "module-rlcard.games.mahjong.utils"]], "set_index_num() (rlcard.games.mahjong.card.mahjongcard method)": [[17, "rlcard.games.mahjong.card.MahjongCard.set_index_num"]], "shuffle() (rlcard.games.mahjong.dealer.mahjongdealer method)": [[17, "rlcard.games.mahjong.dealer.MahjongDealer.shuffle"]], "step() (rlcard.games.mahjong.game.mahjonggame method)": [[17, "rlcard.games.mahjong.game.MahjongGame.step"]], "step_back() (rlcard.games.mahjong.game.mahjonggame method)": [[17, "rlcard.games.mahjong.game.MahjongGame.step_back"]], "all_in (rlcard.games.nolimitholdem.round.action attribute)": [[18, "rlcard.games.nolimitholdem.round.Action.ALL_IN"]], "action (class in rlcard.games.nolimitholdem.round)": [[18, "rlcard.games.nolimitholdem.round.Action"]], "check_call (rlcard.games.nolimitholdem.round.action attribute)": [[18, "rlcard.games.nolimitholdem.round.Action.CHECK_CALL"]], "end_hidden (rlcard.games.nolimitholdem.game.stage attribute)": [[18, "rlcard.games.nolimitholdem.game.Stage.END_HIDDEN"]], "flop (rlcard.games.nolimitholdem.game.stage attribute)": [[18, "rlcard.games.nolimitholdem.game.Stage.FLOP"]], "fold (rlcard.games.nolimitholdem.round.action attribute)": [[18, "rlcard.games.nolimitholdem.round.Action.FOLD"]], "nolimitholdemdealer (class in rlcard.games.nolimitholdem.dealer)": [[18, "rlcard.games.nolimitholdem.dealer.NolimitholdemDealer"]], "nolimitholdemgame (class in rlcard.games.nolimitholdem.game)": [[18, "rlcard.games.nolimitholdem.game.NolimitholdemGame"]], "nolimitholdemjudger (class in rlcard.games.nolimitholdem.judger)": [[18, "rlcard.games.nolimitholdem.judger.NolimitholdemJudger"]], "nolimitholdemplayer (class in rlcard.games.nolimitholdem.player)": [[18, "rlcard.games.nolimitholdem.player.NolimitholdemPlayer"]], "nolimitholdemround (class in rlcard.games.nolimitholdem.round)": [[18, "rlcard.games.nolimitholdem.round.NolimitholdemRound"]], "preflop (rlcard.games.nolimitholdem.game.stage attribute)": [[18, "rlcard.games.nolimitholdem.game.Stage.PREFLOP"]], "raise_half_pot (rlcard.games.nolimitholdem.round.action attribute)": [[18, "rlcard.games.nolimitholdem.round.Action.RAISE_HALF_POT"]], "raise_pot (rlcard.games.nolimitholdem.round.action attribute)": [[18, "rlcard.games.nolimitholdem.round.Action.RAISE_POT"]], "river (rlcard.games.nolimitholdem.game.stage attribute)": [[18, "rlcard.games.nolimitholdem.game.Stage.RIVER"]], "showdown (rlcard.games.nolimitholdem.game.stage attribute)": [[18, "rlcard.games.nolimitholdem.game.Stage.SHOWDOWN"]], "stage (class in rlcard.games.nolimitholdem.game)": [[18, "rlcard.games.nolimitholdem.game.Stage"]], "turn (rlcard.games.nolimitholdem.game.stage attribute)": [[18, "rlcard.games.nolimitholdem.game.Stage.TURN"]], "bet() (rlcard.games.nolimitholdem.player.nolimitholdemplayer method)": [[18, "rlcard.games.nolimitholdem.player.NolimitholdemPlayer.bet"]], "configure() (rlcard.games.nolimitholdem.game.nolimitholdemgame method)": [[18, "rlcard.games.nolimitholdem.game.NolimitholdemGame.configure"]], "get_legal_actions() (rlcard.games.nolimitholdem.game.nolimitholdemgame method)": [[18, "rlcard.games.nolimitholdem.game.NolimitholdemGame.get_legal_actions"]], "get_nolimit_legal_actions() (rlcard.games.nolimitholdem.round.nolimitholdemround method)": [[18, "rlcard.games.nolimitholdem.round.NolimitholdemRound.get_nolimit_legal_actions"]], "get_num_actions() (rlcard.games.nolimitholdem.game.nolimitholdemgame static method)": [[18, "rlcard.games.nolimitholdem.game.NolimitholdemGame.get_num_actions"]], "get_num_players() (rlcard.games.nolimitholdem.game.nolimitholdemgame method)": [[18, "rlcard.games.nolimitholdem.game.NolimitholdemGame.get_num_players"]], "get_payoffs() (rlcard.games.nolimitholdem.game.nolimitholdemgame method)": [[18, "rlcard.games.nolimitholdem.game.NolimitholdemGame.get_payoffs"]], "get_state() (rlcard.games.nolimitholdem.game.nolimitholdemgame method)": [[18, "rlcard.games.nolimitholdem.game.NolimitholdemGame.get_state"]], "init_game() (rlcard.games.nolimitholdem.game.nolimitholdemgame method)": [[18, "rlcard.games.nolimitholdem.game.NolimitholdemGame.init_game"]], "is_over() (rlcard.games.nolimitholdem.round.nolimitholdemround method)": [[18, "rlcard.games.nolimitholdem.round.NolimitholdemRound.is_over"]], "proceed_round() (rlcard.games.nolimitholdem.round.nolimitholdemround method)": [[18, "rlcard.games.nolimitholdem.round.NolimitholdemRound.proceed_round"]], "rlcard.games.nolimitholdem.dealer": [[18, "module-rlcard.games.nolimitholdem.dealer"]], "rlcard.games.nolimitholdem.game": [[18, "module-rlcard.games.nolimitholdem.game"]], "rlcard.games.nolimitholdem.judger": [[18, "module-rlcard.games.nolimitholdem.judger"]], "rlcard.games.nolimitholdem.player": [[18, "module-rlcard.games.nolimitholdem.player"]], "rlcard.games.nolimitholdem.round": [[18, "module-rlcard.games.nolimitholdem.round"]], "start_new_round() (rlcard.games.nolimitholdem.round.nolimitholdemround method)": [[18, "rlcard.games.nolimitholdem.round.NolimitholdemRound.start_new_round"]], "step() (rlcard.games.nolimitholdem.game.nolimitholdemgame method)": [[18, "rlcard.games.nolimitholdem.game.NolimitholdemGame.step"]], "step_back() (rlcard.games.nolimitholdem.game.nolimitholdemgame method)": [[18, "rlcard.games.nolimitholdem.game.NolimitholdemGame.step_back"]], "unocard (class in rlcard.games.uno.card)": [[19, "rlcard.games.uno.card.UnoCard"]], "unodealer (class in rlcard.games.uno.dealer)": [[19, "rlcard.games.uno.dealer.UnoDealer"]], "unogame (class in rlcard.games.uno.game)": [[19, "rlcard.games.uno.game.UnoGame"]], "unojudger (class in rlcard.games.uno.judger)": [[19, "rlcard.games.uno.judger.UnoJudger"]], "unoplayer (class in rlcard.games.uno.player)": [[19, "rlcard.games.uno.player.UnoPlayer"]], "unoround (class in rlcard.games.uno.round)": [[19, "rlcard.games.uno.round.UnoRound"]], "cards2list() (in module rlcard.games.uno.utils)": [[19, "rlcard.games.uno.utils.cards2list"]], "configure() (rlcard.games.uno.game.unogame method)": [[19, "rlcard.games.uno.game.UnoGame.configure"]], "deal_cards() (rlcard.games.uno.dealer.unodealer method)": [[19, "rlcard.games.uno.dealer.UnoDealer.deal_cards"]], "encode_hand() (in module rlcard.games.uno.utils)": [[19, "rlcard.games.uno.utils.encode_hand"]], "encode_target() (in module rlcard.games.uno.utils)": [[19, "rlcard.games.uno.utils.encode_target"]], "flip_top_card() (rlcard.games.uno.dealer.unodealer method)": [[19, "rlcard.games.uno.dealer.UnoDealer.flip_top_card"]], "flip_top_card() (rlcard.games.uno.round.unoround method)": [[19, "rlcard.games.uno.round.UnoRound.flip_top_card"]], "get_legal_actions() (rlcard.games.uno.game.unogame method)": [[19, "rlcard.games.uno.game.UnoGame.get_legal_actions"]], "get_legal_actions() (rlcard.games.uno.round.unoround method)": [[19, "rlcard.games.uno.round.UnoRound.get_legal_actions"]], "get_num_actions() (rlcard.games.uno.game.unogame static method)": [[19, "rlcard.games.uno.game.UnoGame.get_num_actions"]], "get_num_players() (rlcard.games.uno.game.unogame method)": [[19, "rlcard.games.uno.game.UnoGame.get_num_players"]], "get_payoffs() (rlcard.games.uno.game.unogame method)": [[19, "rlcard.games.uno.game.UnoGame.get_payoffs"]], "get_player_id() (rlcard.games.uno.game.unogame method)": [[19, "rlcard.games.uno.game.UnoGame.get_player_id"]], "get_player_id() (rlcard.games.uno.player.unoplayer method)": [[19, "rlcard.games.uno.player.UnoPlayer.get_player_id"]], "get_state() (rlcard.games.uno.game.unogame method)": [[19, "rlcard.games.uno.game.UnoGame.get_state"]], "get_state() (rlcard.games.uno.round.unoround method)": [[19, "rlcard.games.uno.round.UnoRound.get_state"]], "get_str() (rlcard.games.uno.card.unocard method)": [[19, "rlcard.games.uno.card.UnoCard.get_str"]], "hand2dict() (in module rlcard.games.uno.utils)": [[19, "rlcard.games.uno.utils.hand2dict"]], "info (rlcard.games.uno.card.unocard attribute)": [[19, "rlcard.games.uno.card.UnoCard.info"]], "init_deck() (in module rlcard.games.uno.utils)": [[19, "rlcard.games.uno.utils.init_deck"]], "init_game() (rlcard.games.uno.game.unogame method)": [[19, "rlcard.games.uno.game.UnoGame.init_game"]], "is_over() (rlcard.games.uno.game.unogame method)": [[19, "rlcard.games.uno.game.UnoGame.is_over"]], "judge_winner() (rlcard.games.uno.judger.unojudger static method)": [[19, "rlcard.games.uno.judger.UnoJudger.judge_winner"]], "perform_top_card() (rlcard.games.uno.round.unoround method)": [[19, "rlcard.games.uno.round.UnoRound.perform_top_card"]], "print_cards() (rlcard.games.uno.card.unocard static method)": [[19, "rlcard.games.uno.card.UnoCard.print_cards"]], "proceed_round() (rlcard.games.uno.round.unoround method)": [[19, "rlcard.games.uno.round.UnoRound.proceed_round"]], "replace_deck() (rlcard.games.uno.round.unoround method)": [[19, "rlcard.games.uno.round.UnoRound.replace_deck"]], "rlcard.games.uno.card": [[19, "module-rlcard.games.uno.card"]], "rlcard.games.uno.dealer": [[19, "module-rlcard.games.uno.dealer"]], "rlcard.games.uno.game": [[19, "module-rlcard.games.uno.game"]], "rlcard.games.uno.judger": [[19, "module-rlcard.games.uno.judger"]], "rlcard.games.uno.player": [[19, "module-rlcard.games.uno.player"]], "rlcard.games.uno.round": [[19, "module-rlcard.games.uno.round"]], "rlcard.games.uno.utils": [[19, "module-rlcard.games.uno.utils"]], "shuffle() (rlcard.games.uno.dealer.unodealer method)": [[19, "rlcard.games.uno.dealer.UnoDealer.shuffle"]], "step() (rlcard.games.uno.game.unogame method)": [[19, "rlcard.games.uno.game.UnoGame.step"]], "step_back() (rlcard.games.uno.game.unogame method)": [[19, "rlcard.games.uno.game.UnoGame.step_back"]], "bridgedefendernoviceruleagent (class in rlcard.models.bridge_rule_models)": [[20, "rlcard.models.bridge_rule_models.BridgeDefenderNoviceRuleAgent"]], "doudizhuruleagentv1 (class in rlcard.models.doudizhu_rule_models)": [[20, "rlcard.models.doudizhu_rule_models.DouDizhuRuleAgentV1"]], "doudizhurulemodelv1 (class in rlcard.models.doudizhu_rule_models)": [[20, "rlcard.models.doudizhu_rule_models.DouDizhuRuleModelV1"]], "ginrummynoviceruleagent (class in rlcard.models.gin_rummy_rule_models)": [[20, "rlcard.models.gin_rummy_rule_models.GinRummyNoviceRuleAgent"]], "ginrummynovicerulemodel (class in rlcard.models.gin_rummy_rule_models)": [[20, "rlcard.models.gin_rummy_rule_models.GinRummyNoviceRuleModel"]], "leducholdemcfrmodel (class in rlcard.models.pretrained_models)": [[20, "rlcard.models.pretrained_models.LeducHoldemCFRModel"]], "leducholdemruleagentv1 (class in rlcard.models.leducholdem_rule_models)": [[20, "rlcard.models.leducholdem_rule_models.LeducHoldemRuleAgentV1"]], "leducholdemruleagentv2 (class in rlcard.models.leducholdem_rule_models)": [[20, "rlcard.models.leducholdem_rule_models.LeducHoldemRuleAgentV2"]], "leducholdemrulemodelv1 (class in rlcard.models.leducholdem_rule_models)": [[20, "rlcard.models.leducholdem_rule_models.LeducHoldemRuleModelV1"]], "leducholdemrulemodelv2 (class in rlcard.models.leducholdem_rule_models)": [[20, "rlcard.models.leducholdem_rule_models.LeducHoldemRuleModelV2"]], "limitholdemruleagentv1 (class in rlcard.models.limitholdem_rule_models)": [[20, "rlcard.models.limitholdem_rule_models.LimitholdemRuleAgentV1"]], "limitholdemrulemodelv1 (class in rlcard.models.limitholdem_rule_models)": [[20, "rlcard.models.limitholdem_rule_models.LimitholdemRuleModelV1"]], "modelregistry (class in rlcard.models.registration)": [[20, "rlcard.models.registration.ModelRegistry"]], "modelspec (class in rlcard.models.registration)": [[20, "rlcard.models.registration.ModelSpec"]], "unoruleagentv1 (class in rlcard.models.uno_rule_models)": [[20, "rlcard.models.uno_rule_models.UNORuleAgentV1"]], "unorulemodelv1 (class in rlcard.models.uno_rule_models)": [[20, "rlcard.models.uno_rule_models.UNORuleModelV1"]], "agents (rlcard.models.doudizhu_rule_models.doudizhurulemodelv1 property)": [[20, "rlcard.models.doudizhu_rule_models.DouDizhuRuleModelV1.agents"]], "agents (rlcard.models.gin_rummy_rule_models.ginrummynovicerulemodel property)": [[20, "rlcard.models.gin_rummy_rule_models.GinRummyNoviceRuleModel.agents"]], "agents (rlcard.models.leducholdem_rule_models.leducholdemrulemodelv1 property)": [[20, "rlcard.models.leducholdem_rule_models.LeducHoldemRuleModelV1.agents"]], "agents (rlcard.models.leducholdem_rule_models.leducholdemrulemodelv2 property)": [[20, "rlcard.models.leducholdem_rule_models.LeducHoldemRuleModelV2.agents"]], "agents (rlcard.models.limitholdem_rule_models.limitholdemrulemodelv1 property)": [[20, "rlcard.models.limitholdem_rule_models.LimitholdemRuleModelV1.agents"]], "agents (rlcard.models.pretrained_models.leducholdemcfrmodel property)": [[20, "rlcard.models.pretrained_models.LeducHoldemCFRModel.agents"]], "agents (rlcard.models.uno_rule_models.unorulemodelv1 property)": [[20, "rlcard.models.uno_rule_models.UNORuleModelV1.agents"]], "card_str2list() (rlcard.models.doudizhu_rule_models.doudizhuruleagentv1 static method)": [[20, "rlcard.models.doudizhu_rule_models.DouDizhuRuleAgentV1.card_str2list"]], "combine_cards() (rlcard.models.doudizhu_rule_models.doudizhuruleagentv1 method)": [[20, "rlcard.models.doudizhu_rule_models.DouDizhuRuleAgentV1.combine_cards"]], "count_colors() (rlcard.models.uno_rule_models.unoruleagentv1 static method)": [[20, "rlcard.models.uno_rule_models.UNORuleAgentV1.count_colors"]], "eval_step() (rlcard.models.bridge_rule_models.bridgedefendernoviceruleagent method)": [[20, "rlcard.models.bridge_rule_models.BridgeDefenderNoviceRuleAgent.eval_step"]], "eval_step() (rlcard.models.doudizhu_rule_models.doudizhuruleagentv1 method)": [[20, "rlcard.models.doudizhu_rule_models.DouDizhuRuleAgentV1.eval_step"]], "eval_step() (rlcard.models.gin_rummy_rule_models.ginrummynoviceruleagent method)": [[20, "rlcard.models.gin_rummy_rule_models.GinRummyNoviceRuleAgent.eval_step"]], "eval_step() (rlcard.models.leducholdem_rule_models.leducholdemruleagentv1 method)": [[20, "rlcard.models.leducholdem_rule_models.LeducHoldemRuleAgentV1.eval_step"]], "eval_step() (rlcard.models.leducholdem_rule_models.leducholdemruleagentv2 method)": [[20, "rlcard.models.leducholdem_rule_models.LeducHoldemRuleAgentV2.eval_step"]], "eval_step() (rlcard.models.limitholdem_rule_models.limitholdemruleagentv1 method)": [[20, "rlcard.models.limitholdem_rule_models.LimitholdemRuleAgentV1.eval_step"]], "eval_step() (rlcard.models.uno_rule_models.unoruleagentv1 method)": [[20, "rlcard.models.uno_rule_models.UNORuleAgentV1.eval_step"]], "filter_wild() (rlcard.models.uno_rule_models.unoruleagentv1 static method)": [[20, "rlcard.models.uno_rule_models.UNORuleAgentV1.filter_wild"]], "list2card_str() (rlcard.models.doudizhu_rule_models.doudizhuruleagentv1 static method)": [[20, "rlcard.models.doudizhu_rule_models.DouDizhuRuleAgentV1.list2card_str"]], "load() (in module rlcard.models.registration)": [[20, "rlcard.models.registration.load"]], "load() (rlcard.models.registration.modelregistry method)": [[20, "rlcard.models.registration.ModelRegistry.load"]], "load() (rlcard.models.registration.modelspec method)": [[20, "rlcard.models.registration.ModelSpec.load"]], "pick_chain() (rlcard.models.doudizhu_rule_models.doudizhuruleagentv1 static method)": [[20, "rlcard.models.doudizhu_rule_models.DouDizhuRuleAgentV1.pick_chain"]], "register() (in module rlcard.models.registration)": [[20, "rlcard.models.registration.register"]], "register() (rlcard.models.registration.modelregistry method)": [[20, "rlcard.models.registration.ModelRegistry.register"]], "rlcard.models.bridge_rule_models": [[20, "module-rlcard.models.bridge_rule_models"]], "rlcard.models.doudizhu_rule_models": [[20, "module-rlcard.models.doudizhu_rule_models"]], "rlcard.models.gin_rummy_rule_models": [[20, "module-rlcard.models.gin_rummy_rule_models"]], "rlcard.models.leducholdem_rule_models": [[20, "module-rlcard.models.leducholdem_rule_models"]], "rlcard.models.limitholdem_rule_models": [[20, "module-rlcard.models.limitholdem_rule_models"]], "rlcard.models.pretrained_models": [[20, "module-rlcard.models.pretrained_models"]], "rlcard.models.registration": [[20, "module-rlcard.models.registration"]], "rlcard.models.uno_rule_models": [[20, "module-rlcard.models.uno_rule_models"]], "step() (rlcard.models.bridge_rule_models.bridgedefendernoviceruleagent static method)": [[20, "rlcard.models.bridge_rule_models.BridgeDefenderNoviceRuleAgent.step"]], "step() (rlcard.models.doudizhu_rule_models.doudizhuruleagentv1 method)": [[20, "rlcard.models.doudizhu_rule_models.DouDizhuRuleAgentV1.step"]], "step() (rlcard.models.gin_rummy_rule_models.ginrummynoviceruleagent static method)": [[20, "rlcard.models.gin_rummy_rule_models.GinRummyNoviceRuleAgent.step"]], "step() (rlcard.models.leducholdem_rule_models.leducholdemruleagentv1 static method)": [[20, "rlcard.models.leducholdem_rule_models.LeducHoldemRuleAgentV1.step"]], "step() (rlcard.models.leducholdem_rule_models.leducholdemruleagentv2 static method)": [[20, "rlcard.models.leducholdem_rule_models.LeducHoldemRuleAgentV2.step"]], "step() (rlcard.models.limitholdem_rule_models.limitholdemruleagentv1 static method)": [[20, "rlcard.models.limitholdem_rule_models.LimitholdemRuleAgentV1.step"]], "step() (rlcard.models.uno_rule_models.unoruleagentv1 method)": [[20, "rlcard.models.uno_rule_models.UNORuleAgentV1.step"]], "use_raw (rlcard.models.limitholdem_rule_models.limitholdemrulemodelv1 property)": [[20, "rlcard.models.limitholdem_rule_models.LimitholdemRuleModelV1.use_raw"]], "use_raw (rlcard.models.uno_rule_models.unorulemodelv1 property)": [[20, "rlcard.models.uno_rule_models.UNORuleModelV1.use_raw"]], "logger (class in rlcard.utils.logger)": [[21, "rlcard.utils.logger.Logger"]], "colorize() (in module rlcard.utils.seeding)": [[21, "rlcard.utils.seeding.colorize"]], "create_seed() (in module rlcard.utils.seeding)": [[21, "rlcard.utils.seeding.create_seed"]], "elegent_form() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.elegent_form"]], "error() (in module rlcard.utils.seeding)": [[21, "rlcard.utils.seeding.error"]], "get_device() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.get_device"]], "hash_seed() (in module rlcard.utils.seeding)": [[21, "rlcard.utils.seeding.hash_seed"]], "init_54_deck() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.init_54_deck"]], "init_standard_deck() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.init_standard_deck"]], "log() (rlcard.utils.logger.logger method)": [[21, "rlcard.utils.logger.Logger.log"]], "log_performance() (rlcard.utils.logger.logger method)": [[21, "rlcard.utils.logger.Logger.log_performance"]], "np_random() (in module rlcard.utils.seeding)": [[21, "rlcard.utils.seeding.np_random"]], "plot_curve() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.plot_curve"]], "print_card() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.print_card"]], "rank2int() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.rank2int"]], "remove_illegal() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.remove_illegal"]], "reorganize() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.reorganize"]], "reorganize_pettingzoo() (in module rlcard.utils.pettingzoo_utils)": [[21, "rlcard.utils.pettingzoo_utils.reorganize_pettingzoo"]], "rlcard.utils.logger": [[21, "module-rlcard.utils.logger"]], "rlcard.utils.pettingzoo_utils": [[21, "module-rlcard.utils.pettingzoo_utils"]], "rlcard.utils.seeding": [[21, "module-rlcard.utils.seeding"]], "rlcard.utils.utils": [[21, "module-rlcard.utils.utils"]], "run_game_pettingzoo() (in module rlcard.utils.pettingzoo_utils)": [[21, "rlcard.utils.pettingzoo_utils.run_game_pettingzoo"]], "set_seed() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.set_seed"]], "tournament() (in module rlcard.utils.utils)": [[21, "rlcard.utils.utils.tournament"]], "tournament_pettingzoo() (in module rlcard.utils.pettingzoo_utils)": [[21, "rlcard.utils.pettingzoo_utils.tournament_pettingzoo"]], "wrap_state() (in module rlcard.utils.pettingzoo_utils)": [[21, "rlcard.utils.pettingzoo_utils.wrap_state"]]}})